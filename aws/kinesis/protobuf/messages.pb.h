// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: messages.proto
// Protobuf C++ Version: 4.25.0

#ifndef GOOGLE_PROTOBUF_INCLUDED_messages_2eproto_2epb_2eh
#define GOOGLE_PROTOBUF_INCLUDED_messages_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>
#include <utility>

#include "google/protobuf/port_def.inc"
#if PROTOBUF_VERSION < 4025000
#error "This file was generated by a newer version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please update"
#error "your headers."
#endif  // PROTOBUF_VERSION

#if 4025000 < PROTOBUF_MIN_PROTOC_VERSION
#error "This file was generated by an older version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please"
#error "regenerate this file with a newer version of protoc."
#endif  // PROTOBUF_MIN_PROTOC_VERSION
#include "google/protobuf/port_undef.inc"
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_tctable_decl.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/unknown_field_set.h"
#include "config.pb.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_messages_2eproto

namespace google {
namespace protobuf {
namespace internal {
class AnyMetadata;
}  // namespace internal
}  // namespace protobuf
}  // namespace google

// Internal implementation detail -- do not use these members.
struct TableStruct_messages_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::google::protobuf::internal::DescriptorTable
    descriptor_table_messages_2eproto;
namespace aws {
namespace kinesis {
namespace protobuf {
class AggregatedRecord;
struct AggregatedRecordDefaultTypeInternal;
extern AggregatedRecordDefaultTypeInternal _AggregatedRecord_default_instance_;
class Attempt;
struct AttemptDefaultTypeInternal;
extern AttemptDefaultTypeInternal _Attempt_default_instance_;
class Credentials;
struct CredentialsDefaultTypeInternal;
extern CredentialsDefaultTypeInternal _Credentials_default_instance_;
class Dimension;
struct DimensionDefaultTypeInternal;
extern DimensionDefaultTypeInternal _Dimension_default_instance_;
class Flush;
struct FlushDefaultTypeInternal;
extern FlushDefaultTypeInternal _Flush_default_instance_;
class Message;
struct MessageDefaultTypeInternal;
extern MessageDefaultTypeInternal _Message_default_instance_;
class Metric;
struct MetricDefaultTypeInternal;
extern MetricDefaultTypeInternal _Metric_default_instance_;
class MetricsRequest;
struct MetricsRequestDefaultTypeInternal;
extern MetricsRequestDefaultTypeInternal _MetricsRequest_default_instance_;
class MetricsResponse;
struct MetricsResponseDefaultTypeInternal;
extern MetricsResponseDefaultTypeInternal _MetricsResponse_default_instance_;
class PutRecord;
struct PutRecordDefaultTypeInternal;
extern PutRecordDefaultTypeInternal _PutRecord_default_instance_;
class PutRecordResult;
struct PutRecordResultDefaultTypeInternal;
extern PutRecordResultDefaultTypeInternal _PutRecordResult_default_instance_;
class Record;
struct RecordDefaultTypeInternal;
extern RecordDefaultTypeInternal _Record_default_instance_;
class SetCredentials;
struct SetCredentialsDefaultTypeInternal;
extern SetCredentialsDefaultTypeInternal _SetCredentials_default_instance_;
class Stats;
struct StatsDefaultTypeInternal;
extern StatsDefaultTypeInternal _Stats_default_instance_;
class Tag;
struct TagDefaultTypeInternal;
extern TagDefaultTypeInternal _Tag_default_instance_;
}  // namespace protobuf
}  // namespace kinesis
}  // namespace aws
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google

namespace aws {
namespace kinesis {
namespace protobuf {

// ===================================================================


// -------------------------------------------------------------------

class Tag final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:aws.kinesis.protobuf.Tag) */ {
 public:
  inline Tag() : Tag(nullptr) {}
  ~Tag() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR Tag(::google::protobuf::internal::ConstantInitialized);

  inline Tag(const Tag& from)
      : Tag(nullptr, from) {}
  Tag(Tag&& from) noexcept
    : Tag() {
    *this = ::std::move(from);
  }

  inline Tag& operator=(const Tag& from) {
    CopyFrom(from);
    return *this;
  }
  inline Tag& operator=(Tag&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Tag& default_instance() {
    return *internal_default_instance();
  }
  static inline const Tag* internal_default_instance() {
    return reinterpret_cast<const Tag*>(
               &_Tag_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Tag& a, Tag& b) {
    a.Swap(&b);
  }
  inline void Swap(Tag* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Tag* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Tag* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Tag>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Tag& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const Tag& from) {
    Tag::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(Tag* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "aws.kinesis.protobuf.Tag";
  }
  protected:
  explicit Tag(::google::protobuf::Arena* arena);
  Tag(::google::protobuf::Arena* arena, const Tag& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kKeyFieldNumber = 1,
    kValueFieldNumber = 2,
  };
  // required string key = 1;
  bool has_key() const;
  void clear_key() ;
  const std::string& key() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_key(Arg_&& arg, Args_... args);
  std::string* mutable_key();
  PROTOBUF_NODISCARD std::string* release_key();
  void set_allocated_key(std::string* value);

  private:
  const std::string& _internal_key() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_key(
      const std::string& value);
  std::string* _internal_mutable_key();

  public:
  // optional string value = 2;
  bool has_value() const;
  void clear_value() ;
  const std::string& value() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_value(Arg_&& arg, Args_... args);
  std::string* mutable_value();
  PROTOBUF_NODISCARD std::string* release_value();
  void set_allocated_value(std::string* value);

  private:
  const std::string& _internal_value() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_value(
      const std::string& value);
  std::string* _internal_mutable_value();

  public:
  // @@protoc_insertion_point(class_scope:aws.kinesis.protobuf.Tag)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 0,
      41, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::internal::ArenaStringPtr key_;
    ::google::protobuf::internal::ArenaStringPtr value_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_messages_2eproto;
};// -------------------------------------------------------------------

class Stats final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:aws.kinesis.protobuf.Stats) */ {
 public:
  inline Stats() : Stats(nullptr) {}
  ~Stats() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR Stats(::google::protobuf::internal::ConstantInitialized);

  inline Stats(const Stats& from)
      : Stats(nullptr, from) {}
  Stats(Stats&& from) noexcept
    : Stats() {
    *this = ::std::move(from);
  }

  inline Stats& operator=(const Stats& from) {
    CopyFrom(from);
    return *this;
  }
  inline Stats& operator=(Stats&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Stats& default_instance() {
    return *internal_default_instance();
  }
  static inline const Stats* internal_default_instance() {
    return reinterpret_cast<const Stats*>(
               &_Stats_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(Stats& a, Stats& b) {
    a.Swap(&b);
  }
  inline void Swap(Stats* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Stats* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Stats* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Stats>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Stats& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const Stats& from) {
    Stats::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(Stats* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "aws.kinesis.protobuf.Stats";
  }
  protected:
  explicit Stats(::google::protobuf::Arena* arena);
  Stats(::google::protobuf::Arena* arena, const Stats& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCountFieldNumber = 1,
    kSumFieldNumber = 2,
    kMeanFieldNumber = 3,
    kMinFieldNumber = 4,
    kMaxFieldNumber = 5,
  };
  // required double count = 1;
  bool has_count() const;
  void clear_count() ;
  double count() const;
  void set_count(double value);

  private:
  double _internal_count() const;
  void _internal_set_count(double value);

  public:
  // required double sum = 2;
  bool has_sum() const;
  void clear_sum() ;
  double sum() const;
  void set_sum(double value);

  private:
  double _internal_sum() const;
  void _internal_set_sum(double value);

  public:
  // required double mean = 3;
  bool has_mean() const;
  void clear_mean() ;
  double mean() const;
  void set_mean(double value);

  private:
  double _internal_mean() const;
  void _internal_set_mean(double value);

  public:
  // required double min = 4;
  bool has_min() const;
  void clear_min() ;
  double min() const;
  void set_min(double value);

  private:
  double _internal_min() const;
  void _internal_set_min(double value);

  public:
  // required double max = 5;
  bool has_max() const;
  void clear_max() ;
  double max() const;
  void set_max(double value);

  private:
  double _internal_max() const;
  void _internal_set_max(double value);

  public:
  // @@protoc_insertion_point(class_scope:aws.kinesis.protobuf.Stats)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      3, 5, 0,
      0, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    double count_;
    double sum_;
    double mean_;
    double min_;
    double max_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_messages_2eproto;
};// -------------------------------------------------------------------

class PutRecord final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:aws.kinesis.protobuf.PutRecord) */ {
 public:
  inline PutRecord() : PutRecord(nullptr) {}
  ~PutRecord() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR PutRecord(::google::protobuf::internal::ConstantInitialized);

  inline PutRecord(const PutRecord& from)
      : PutRecord(nullptr, from) {}
  PutRecord(PutRecord&& from) noexcept
    : PutRecord() {
    *this = ::std::move(from);
  }

  inline PutRecord& operator=(const PutRecord& from) {
    CopyFrom(from);
    return *this;
  }
  inline PutRecord& operator=(PutRecord&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PutRecord& default_instance() {
    return *internal_default_instance();
  }
  static inline const PutRecord* internal_default_instance() {
    return reinterpret_cast<const PutRecord*>(
               &_PutRecord_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(PutRecord& a, PutRecord& b) {
    a.Swap(&b);
  }
  inline void Swap(PutRecord* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PutRecord* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PutRecord* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PutRecord>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const PutRecord& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const PutRecord& from) {
    PutRecord::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(PutRecord* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "aws.kinesis.protobuf.PutRecord";
  }
  protected:
  explicit PutRecord(::google::protobuf::Arena* arena);
  PutRecord(::google::protobuf::Arena* arena, const PutRecord& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStreamNameFieldNumber = 1,
    kPartitionKeyFieldNumber = 2,
    kExplicitHashKeyFieldNumber = 3,
    kDataFieldNumber = 4,
    kStreamArnFieldNumber = 5,
  };
  // required string stream_name = 1;
  bool has_stream_name() const;
  void clear_stream_name() ;
  const std::string& stream_name() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_stream_name(Arg_&& arg, Args_... args);
  std::string* mutable_stream_name();
  PROTOBUF_NODISCARD std::string* release_stream_name();
  void set_allocated_stream_name(std::string* value);

  private:
  const std::string& _internal_stream_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_stream_name(
      const std::string& value);
  std::string* _internal_mutable_stream_name();

  public:
  // required string partition_key = 2;
  bool has_partition_key() const;
  void clear_partition_key() ;
  const std::string& partition_key() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_partition_key(Arg_&& arg, Args_... args);
  std::string* mutable_partition_key();
  PROTOBUF_NODISCARD std::string* release_partition_key();
  void set_allocated_partition_key(std::string* value);

  private:
  const std::string& _internal_partition_key() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_partition_key(
      const std::string& value);
  std::string* _internal_mutable_partition_key();

  public:
  // optional string explicit_hash_key = 3;
  bool has_explicit_hash_key() const;
  void clear_explicit_hash_key() ;
  const std::string& explicit_hash_key() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_explicit_hash_key(Arg_&& arg, Args_... args);
  std::string* mutable_explicit_hash_key();
  PROTOBUF_NODISCARD std::string* release_explicit_hash_key();
  void set_allocated_explicit_hash_key(std::string* value);

  private:
  const std::string& _internal_explicit_hash_key() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_explicit_hash_key(
      const std::string& value);
  std::string* _internal_mutable_explicit_hash_key();

  public:
  // required bytes data = 4;
  bool has_data() const;
  void clear_data() ;
  const std::string& data() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_data(Arg_&& arg, Args_... args);
  std::string* mutable_data();
  PROTOBUF_NODISCARD std::string* release_data();
  void set_allocated_data(std::string* value);

  private:
  const std::string& _internal_data() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_data(
      const std::string& value);
  std::string* _internal_mutable_data();

  public:
  // optional string stream_arn = 5;
  bool has_stream_arn() const;
  void clear_stream_arn() ;
  const std::string& stream_arn() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_stream_arn(Arg_&& arg, Args_... args);
  std::string* mutable_stream_arn();
  PROTOBUF_NODISCARD std::string* release_stream_arn();
  void set_allocated_stream_arn(std::string* value);

  private:
  const std::string& _internal_stream_arn() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_stream_arn(
      const std::string& value);
  std::string* _internal_mutable_stream_arn();

  public:
  // @@protoc_insertion_point(class_scope:aws.kinesis.protobuf.PutRecord)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      3, 5, 0,
      90, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::internal::ArenaStringPtr stream_name_;
    ::google::protobuf::internal::ArenaStringPtr partition_key_;
    ::google::protobuf::internal::ArenaStringPtr explicit_hash_key_;
    ::google::protobuf::internal::ArenaStringPtr data_;
    ::google::protobuf::internal::ArenaStringPtr stream_arn_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_messages_2eproto;
};// -------------------------------------------------------------------

class MetricsRequest final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:aws.kinesis.protobuf.MetricsRequest) */ {
 public:
  inline MetricsRequest() : MetricsRequest(nullptr) {}
  ~MetricsRequest() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR MetricsRequest(::google::protobuf::internal::ConstantInitialized);

  inline MetricsRequest(const MetricsRequest& from)
      : MetricsRequest(nullptr, from) {}
  MetricsRequest(MetricsRequest&& from) noexcept
    : MetricsRequest() {
    *this = ::std::move(from);
  }

  inline MetricsRequest& operator=(const MetricsRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline MetricsRequest& operator=(MetricsRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MetricsRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const MetricsRequest* internal_default_instance() {
    return reinterpret_cast<const MetricsRequest*>(
               &_MetricsRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(MetricsRequest& a, MetricsRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(MetricsRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MetricsRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MetricsRequest* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<MetricsRequest>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const MetricsRequest& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const MetricsRequest& from) {
    MetricsRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(MetricsRequest* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "aws.kinesis.protobuf.MetricsRequest";
  }
  protected:
  explicit MetricsRequest(::google::protobuf::Arena* arena);
  MetricsRequest(::google::protobuf::Arena* arena, const MetricsRequest& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kSecondsFieldNumber = 2,
  };
  // optional string name = 1;
  bool has_name() const;
  void clear_name() ;
  const std::string& name() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_name(Arg_&& arg, Args_... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* value);

  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(
      const std::string& value);
  std::string* _internal_mutable_name();

  public:
  // optional uint64 seconds = 2;
  bool has_seconds() const;
  void clear_seconds() ;
  ::uint64_t seconds() const;
  void set_seconds(::uint64_t value);

  private:
  ::uint64_t _internal_seconds() const;
  void _internal_set_seconds(::uint64_t value);

  public:
  // @@protoc_insertion_point(class_scope:aws.kinesis.protobuf.MetricsRequest)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 0,
      48, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::internal::ArenaStringPtr name_;
    ::uint64_t seconds_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_messages_2eproto;
};// -------------------------------------------------------------------

class Flush final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:aws.kinesis.protobuf.Flush) */ {
 public:
  inline Flush() : Flush(nullptr) {}
  ~Flush() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR Flush(::google::protobuf::internal::ConstantInitialized);

  inline Flush(const Flush& from)
      : Flush(nullptr, from) {}
  Flush(Flush&& from) noexcept
    : Flush() {
    *this = ::std::move(from);
  }

  inline Flush& operator=(const Flush& from) {
    CopyFrom(from);
    return *this;
  }
  inline Flush& operator=(Flush&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Flush& default_instance() {
    return *internal_default_instance();
  }
  static inline const Flush* internal_default_instance() {
    return reinterpret_cast<const Flush*>(
               &_Flush_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(Flush& a, Flush& b) {
    a.Swap(&b);
  }
  inline void Swap(Flush* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Flush* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Flush* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Flush>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Flush& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const Flush& from) {
    Flush::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(Flush* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "aws.kinesis.protobuf.Flush";
  }
  protected:
  explicit Flush(::google::protobuf::Arena* arena);
  Flush(::google::protobuf::Arena* arena, const Flush& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStreamNameFieldNumber = 1,
  };
  // optional string stream_name = 1;
  bool has_stream_name() const;
  void clear_stream_name() ;
  const std::string& stream_name() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_stream_name(Arg_&& arg, Args_... args);
  std::string* mutable_stream_name();
  PROTOBUF_NODISCARD std::string* release_stream_name();
  void set_allocated_stream_name(std::string* value);

  private:
  const std::string& _internal_stream_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_stream_name(
      const std::string& value);
  std::string* _internal_mutable_stream_name();

  public:
  // @@protoc_insertion_point(class_scope:aws.kinesis.protobuf.Flush)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 0,
      46, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::internal::ArenaStringPtr stream_name_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_messages_2eproto;
};// -------------------------------------------------------------------

class Dimension final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:aws.kinesis.protobuf.Dimension) */ {
 public:
  inline Dimension() : Dimension(nullptr) {}
  ~Dimension() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR Dimension(::google::protobuf::internal::ConstantInitialized);

  inline Dimension(const Dimension& from)
      : Dimension(nullptr, from) {}
  Dimension(Dimension&& from) noexcept
    : Dimension() {
    *this = ::std::move(from);
  }

  inline Dimension& operator=(const Dimension& from) {
    CopyFrom(from);
    return *this;
  }
  inline Dimension& operator=(Dimension&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Dimension& default_instance() {
    return *internal_default_instance();
  }
  static inline const Dimension* internal_default_instance() {
    return reinterpret_cast<const Dimension*>(
               &_Dimension_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(Dimension& a, Dimension& b) {
    a.Swap(&b);
  }
  inline void Swap(Dimension* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Dimension* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Dimension* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Dimension>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Dimension& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const Dimension& from) {
    Dimension::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(Dimension* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "aws.kinesis.protobuf.Dimension";
  }
  protected:
  explicit Dimension(::google::protobuf::Arena* arena);
  Dimension(::google::protobuf::Arena* arena, const Dimension& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kKeyFieldNumber = 1,
    kValueFieldNumber = 2,
  };
  // required string key = 1;
  bool has_key() const;
  void clear_key() ;
  const std::string& key() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_key(Arg_&& arg, Args_... args);
  std::string* mutable_key();
  PROTOBUF_NODISCARD std::string* release_key();
  void set_allocated_key(std::string* value);

  private:
  const std::string& _internal_key() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_key(
      const std::string& value);
  std::string* _internal_mutable_key();

  public:
  // required string value = 2;
  bool has_value() const;
  void clear_value() ;
  const std::string& value() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_value(Arg_&& arg, Args_... args);
  std::string* mutable_value();
  PROTOBUF_NODISCARD std::string* release_value();
  void set_allocated_value(std::string* value);

  private:
  const std::string& _internal_value() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_value(
      const std::string& value);
  std::string* _internal_mutable_value();

  public:
  // @@protoc_insertion_point(class_scope:aws.kinesis.protobuf.Dimension)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 0,
      47, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::internal::ArenaStringPtr key_;
    ::google::protobuf::internal::ArenaStringPtr value_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_messages_2eproto;
};// -------------------------------------------------------------------

class Credentials final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:aws.kinesis.protobuf.Credentials) */ {
 public:
  inline Credentials() : Credentials(nullptr) {}
  ~Credentials() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR Credentials(::google::protobuf::internal::ConstantInitialized);

  inline Credentials(const Credentials& from)
      : Credentials(nullptr, from) {}
  Credentials(Credentials&& from) noexcept
    : Credentials() {
    *this = ::std::move(from);
  }

  inline Credentials& operator=(const Credentials& from) {
    CopyFrom(from);
    return *this;
  }
  inline Credentials& operator=(Credentials&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Credentials& default_instance() {
    return *internal_default_instance();
  }
  static inline const Credentials* internal_default_instance() {
    return reinterpret_cast<const Credentials*>(
               &_Credentials_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(Credentials& a, Credentials& b) {
    a.Swap(&b);
  }
  inline void Swap(Credentials* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Credentials* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Credentials* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Credentials>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Credentials& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const Credentials& from) {
    Credentials::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(Credentials* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "aws.kinesis.protobuf.Credentials";
  }
  protected:
  explicit Credentials(::google::protobuf::Arena* arena);
  Credentials(::google::protobuf::Arena* arena, const Credentials& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAkidFieldNumber = 1,
    kSecretKeyFieldNumber = 2,
    kTokenFieldNumber = 3,
  };
  // required string akid = 1;
  bool has_akid() const;
  void clear_akid() ;
  const std::string& akid() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_akid(Arg_&& arg, Args_... args);
  std::string* mutable_akid();
  PROTOBUF_NODISCARD std::string* release_akid();
  void set_allocated_akid(std::string* value);

  private:
  const std::string& _internal_akid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_akid(
      const std::string& value);
  std::string* _internal_mutable_akid();

  public:
  // required string secret_key = 2;
  bool has_secret_key() const;
  void clear_secret_key() ;
  const std::string& secret_key() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_secret_key(Arg_&& arg, Args_... args);
  std::string* mutable_secret_key();
  PROTOBUF_NODISCARD std::string* release_secret_key();
  void set_allocated_secret_key(std::string* value);

  private:
  const std::string& _internal_secret_key() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_secret_key(
      const std::string& value);
  std::string* _internal_mutable_secret_key();

  public:
  // optional string token = 3;
  bool has_token() const;
  void clear_token() ;
  const std::string& token() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_token(Arg_&& arg, Args_... args);
  std::string* mutable_token();
  PROTOBUF_NODISCARD std::string* release_token();
  void set_allocated_token(std::string* value);

  private:
  const std::string& _internal_token() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_token(
      const std::string& value);
  std::string* _internal_mutable_token();

  public:
  // @@protoc_insertion_point(class_scope:aws.kinesis.protobuf.Credentials)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 3, 0,
      60, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::internal::ArenaStringPtr akid_;
    ::google::protobuf::internal::ArenaStringPtr secret_key_;
    ::google::protobuf::internal::ArenaStringPtr token_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_messages_2eproto;
};// -------------------------------------------------------------------

class Attempt final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:aws.kinesis.protobuf.Attempt) */ {
 public:
  inline Attempt() : Attempt(nullptr) {}
  ~Attempt() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR Attempt(::google::protobuf::internal::ConstantInitialized);

  inline Attempt(const Attempt& from)
      : Attempt(nullptr, from) {}
  Attempt(Attempt&& from) noexcept
    : Attempt() {
    *this = ::std::move(from);
  }

  inline Attempt& operator=(const Attempt& from) {
    CopyFrom(from);
    return *this;
  }
  inline Attempt& operator=(Attempt&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Attempt& default_instance() {
    return *internal_default_instance();
  }
  static inline const Attempt* internal_default_instance() {
    return reinterpret_cast<const Attempt*>(
               &_Attempt_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(Attempt& a, Attempt& b) {
    a.Swap(&b);
  }
  inline void Swap(Attempt* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Attempt* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Attempt* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Attempt>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Attempt& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const Attempt& from) {
    Attempt::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(Attempt* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "aws.kinesis.protobuf.Attempt";
  }
  protected:
  explicit Attempt(::google::protobuf::Arena* arena);
  Attempt(::google::protobuf::Arena* arena, const Attempt& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kErrorCodeFieldNumber = 4,
    kErrorMessageFieldNumber = 5,
    kDelayFieldNumber = 1,
    kDurationFieldNumber = 2,
    kSuccessFieldNumber = 3,
  };
  // optional string error_code = 4;
  bool has_error_code() const;
  void clear_error_code() ;
  const std::string& error_code() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_error_code(Arg_&& arg, Args_... args);
  std::string* mutable_error_code();
  PROTOBUF_NODISCARD std::string* release_error_code();
  void set_allocated_error_code(std::string* value);

  private:
  const std::string& _internal_error_code() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_error_code(
      const std::string& value);
  std::string* _internal_mutable_error_code();

  public:
  // optional string error_message = 5;
  bool has_error_message() const;
  void clear_error_message() ;
  const std::string& error_message() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_error_message(Arg_&& arg, Args_... args);
  std::string* mutable_error_message();
  PROTOBUF_NODISCARD std::string* release_error_message();
  void set_allocated_error_message(std::string* value);

  private:
  const std::string& _internal_error_message() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_error_message(
      const std::string& value);
  std::string* _internal_mutable_error_message();

  public:
  // required uint32 delay = 1;
  bool has_delay() const;
  void clear_delay() ;
  ::uint32_t delay() const;
  void set_delay(::uint32_t value);

  private:
  ::uint32_t _internal_delay() const;
  void _internal_set_delay(::uint32_t value);

  public:
  // required uint32 duration = 2;
  bool has_duration() const;
  void clear_duration() ;
  ::uint32_t duration() const;
  void set_duration(::uint32_t value);

  private:
  ::uint32_t _internal_duration() const;
  void _internal_set_duration(::uint32_t value);

  public:
  // required bool success = 3;
  bool has_success() const;
  void clear_success() ;
  bool success() const;
  void set_success(bool value);

  private:
  bool _internal_success() const;
  void _internal_set_success(bool value);

  public:
  // @@protoc_insertion_point(class_scope:aws.kinesis.protobuf.Attempt)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      3, 5, 0,
      60, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::internal::ArenaStringPtr error_code_;
    ::google::protobuf::internal::ArenaStringPtr error_message_;
    ::uint32_t delay_;
    ::uint32_t duration_;
    bool success_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_messages_2eproto;
};// -------------------------------------------------------------------

class SetCredentials final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:aws.kinesis.protobuf.SetCredentials) */ {
 public:
  inline SetCredentials() : SetCredentials(nullptr) {}
  ~SetCredentials() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR SetCredentials(::google::protobuf::internal::ConstantInitialized);

  inline SetCredentials(const SetCredentials& from)
      : SetCredentials(nullptr, from) {}
  SetCredentials(SetCredentials&& from) noexcept
    : SetCredentials() {
    *this = ::std::move(from);
  }

  inline SetCredentials& operator=(const SetCredentials& from) {
    CopyFrom(from);
    return *this;
  }
  inline SetCredentials& operator=(SetCredentials&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SetCredentials& default_instance() {
    return *internal_default_instance();
  }
  static inline const SetCredentials* internal_default_instance() {
    return reinterpret_cast<const SetCredentials*>(
               &_SetCredentials_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(SetCredentials& a, SetCredentials& b) {
    a.Swap(&b);
  }
  inline void Swap(SetCredentials* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SetCredentials* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SetCredentials* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SetCredentials>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const SetCredentials& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const SetCredentials& from) {
    SetCredentials::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(SetCredentials* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "aws.kinesis.protobuf.SetCredentials";
  }
  protected:
  explicit SetCredentials(::google::protobuf::Arena* arena);
  SetCredentials(::google::protobuf::Arena* arena, const SetCredentials& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCredentialsFieldNumber = 2,
    kForMetricsFieldNumber = 1,
  };
  // required .aws.kinesis.protobuf.Credentials credentials = 2;
  bool has_credentials() const;
  void clear_credentials() ;
  const ::aws::kinesis::protobuf::Credentials& credentials() const;
  PROTOBUF_NODISCARD ::aws::kinesis::protobuf::Credentials* release_credentials();
  ::aws::kinesis::protobuf::Credentials* mutable_credentials();
  void set_allocated_credentials(::aws::kinesis::protobuf::Credentials* value);
  void unsafe_arena_set_allocated_credentials(::aws::kinesis::protobuf::Credentials* value);
  ::aws::kinesis::protobuf::Credentials* unsafe_arena_release_credentials();

  private:
  const ::aws::kinesis::protobuf::Credentials& _internal_credentials() const;
  ::aws::kinesis::protobuf::Credentials* _internal_mutable_credentials();

  public:
  // optional bool for_metrics = 1;
  bool has_for_metrics() const;
  void clear_for_metrics() ;
  bool for_metrics() const;
  void set_for_metrics(bool value);

  private:
  bool _internal_for_metrics() const;
  void _internal_set_for_metrics(bool value);

  public:
  // @@protoc_insertion_point(class_scope:aws.kinesis.protobuf.SetCredentials)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 1,
      0, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::aws::kinesis::protobuf::Credentials* credentials_;
    bool for_metrics_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_messages_2eproto;
};// -------------------------------------------------------------------

class Record final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:aws.kinesis.protobuf.Record) */ {
 public:
  inline Record() : Record(nullptr) {}
  ~Record() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR Record(::google::protobuf::internal::ConstantInitialized);

  inline Record(const Record& from)
      : Record(nullptr, from) {}
  Record(Record&& from) noexcept
    : Record() {
    *this = ::std::move(from);
  }

  inline Record& operator=(const Record& from) {
    CopyFrom(from);
    return *this;
  }
  inline Record& operator=(Record&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Record& default_instance() {
    return *internal_default_instance();
  }
  static inline const Record* internal_default_instance() {
    return reinterpret_cast<const Record*>(
               &_Record_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Record& a, Record& b) {
    a.Swap(&b);
  }
  inline void Swap(Record* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Record* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Record* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Record>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Record& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const Record& from) {
    Record::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(Record* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "aws.kinesis.protobuf.Record";
  }
  protected:
  explicit Record(::google::protobuf::Arena* arena);
  Record(::google::protobuf::Arena* arena, const Record& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTagsFieldNumber = 4,
    kDataFieldNumber = 3,
    kPartitionKeyIndexFieldNumber = 1,
    kExplicitHashKeyIndexFieldNumber = 2,
  };
  // repeated .aws.kinesis.protobuf.Tag tags = 4;
  int tags_size() const;
  private:
  int _internal_tags_size() const;

  public:
  void clear_tags() ;
  ::aws::kinesis::protobuf::Tag* mutable_tags(int index);
  ::google::protobuf::RepeatedPtrField< ::aws::kinesis::protobuf::Tag >*
      mutable_tags();
  private:
  const ::google::protobuf::RepeatedPtrField<::aws::kinesis::protobuf::Tag>& _internal_tags() const;
  ::google::protobuf::RepeatedPtrField<::aws::kinesis::protobuf::Tag>* _internal_mutable_tags();
  public:
  const ::aws::kinesis::protobuf::Tag& tags(int index) const;
  ::aws::kinesis::protobuf::Tag* add_tags();
  const ::google::protobuf::RepeatedPtrField< ::aws::kinesis::protobuf::Tag >&
      tags() const;
  // required bytes data = 3;
  bool has_data() const;
  void clear_data() ;
  const std::string& data() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_data(Arg_&& arg, Args_... args);
  std::string* mutable_data();
  PROTOBUF_NODISCARD std::string* release_data();
  void set_allocated_data(std::string* value);

  private:
  const std::string& _internal_data() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_data(
      const std::string& value);
  std::string* _internal_mutable_data();

  public:
  // required uint64 partition_key_index = 1;
  bool has_partition_key_index() const;
  void clear_partition_key_index() ;
  ::uint64_t partition_key_index() const;
  void set_partition_key_index(::uint64_t value);

  private:
  ::uint64_t _internal_partition_key_index() const;
  void _internal_set_partition_key_index(::uint64_t value);

  public:
  // optional uint64 explicit_hash_key_index = 2;
  bool has_explicit_hash_key_index() const;
  void clear_explicit_hash_key_index() ;
  ::uint64_t explicit_hash_key_index() const;
  void set_explicit_hash_key_index(::uint64_t value);

  private:
  ::uint64_t _internal_explicit_hash_key_index() const;
  void _internal_set_explicit_hash_key_index(::uint64_t value);

  public:
  // @@protoc_insertion_point(class_scope:aws.kinesis.protobuf.Record)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 4, 1,
      0, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::RepeatedPtrField< ::aws::kinesis::protobuf::Tag > tags_;
    ::google::protobuf::internal::ArenaStringPtr data_;
    ::uint64_t partition_key_index_;
    ::uint64_t explicit_hash_key_index_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_messages_2eproto;
};// -------------------------------------------------------------------

class PutRecordResult final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:aws.kinesis.protobuf.PutRecordResult) */ {
 public:
  inline PutRecordResult() : PutRecordResult(nullptr) {}
  ~PutRecordResult() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR PutRecordResult(::google::protobuf::internal::ConstantInitialized);

  inline PutRecordResult(const PutRecordResult& from)
      : PutRecordResult(nullptr, from) {}
  PutRecordResult(PutRecordResult&& from) noexcept
    : PutRecordResult() {
    *this = ::std::move(from);
  }

  inline PutRecordResult& operator=(const PutRecordResult& from) {
    CopyFrom(from);
    return *this;
  }
  inline PutRecordResult& operator=(PutRecordResult&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PutRecordResult& default_instance() {
    return *internal_default_instance();
  }
  static inline const PutRecordResult* internal_default_instance() {
    return reinterpret_cast<const PutRecordResult*>(
               &_PutRecordResult_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(PutRecordResult& a, PutRecordResult& b) {
    a.Swap(&b);
  }
  inline void Swap(PutRecordResult* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PutRecordResult* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PutRecordResult* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PutRecordResult>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const PutRecordResult& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const PutRecordResult& from) {
    PutRecordResult::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(PutRecordResult* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "aws.kinesis.protobuf.PutRecordResult";
  }
  protected:
  explicit PutRecordResult(::google::protobuf::Arena* arena);
  PutRecordResult(::google::protobuf::Arena* arena, const PutRecordResult& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAttemptsFieldNumber = 1,
    kShardIdFieldNumber = 3,
    kSequenceNumberFieldNumber = 4,
    kSuccessFieldNumber = 2,
  };
  // repeated .aws.kinesis.protobuf.Attempt attempts = 1;
  int attempts_size() const;
  private:
  int _internal_attempts_size() const;

  public:
  void clear_attempts() ;
  ::aws::kinesis::protobuf::Attempt* mutable_attempts(int index);
  ::google::protobuf::RepeatedPtrField< ::aws::kinesis::protobuf::Attempt >*
      mutable_attempts();
  private:
  const ::google::protobuf::RepeatedPtrField<::aws::kinesis::protobuf::Attempt>& _internal_attempts() const;
  ::google::protobuf::RepeatedPtrField<::aws::kinesis::protobuf::Attempt>* _internal_mutable_attempts();
  public:
  const ::aws::kinesis::protobuf::Attempt& attempts(int index) const;
  ::aws::kinesis::protobuf::Attempt* add_attempts();
  const ::google::protobuf::RepeatedPtrField< ::aws::kinesis::protobuf::Attempt >&
      attempts() const;
  // optional string shard_id = 3;
  bool has_shard_id() const;
  void clear_shard_id() ;
  const std::string& shard_id() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_shard_id(Arg_&& arg, Args_... args);
  std::string* mutable_shard_id();
  PROTOBUF_NODISCARD std::string* release_shard_id();
  void set_allocated_shard_id(std::string* value);

  private:
  const std::string& _internal_shard_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_shard_id(
      const std::string& value);
  std::string* _internal_mutable_shard_id();

  public:
  // optional string sequence_number = 4;
  bool has_sequence_number() const;
  void clear_sequence_number() ;
  const std::string& sequence_number() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_sequence_number(Arg_&& arg, Args_... args);
  std::string* mutable_sequence_number();
  PROTOBUF_NODISCARD std::string* release_sequence_number();
  void set_allocated_sequence_number(std::string* value);

  private:
  const std::string& _internal_sequence_number() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_sequence_number(
      const std::string& value);
  std::string* _internal_mutable_sequence_number();

  public:
  // required bool success = 2;
  bool has_success() const;
  void clear_success() ;
  bool success() const;
  void set_success(bool value);

  private:
  bool _internal_success() const;
  void _internal_set_success(bool value);

  public:
  // @@protoc_insertion_point(class_scope:aws.kinesis.protobuf.PutRecordResult)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 4, 1,
      68, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::RepeatedPtrField< ::aws::kinesis::protobuf::Attempt > attempts_;
    ::google::protobuf::internal::ArenaStringPtr shard_id_;
    ::google::protobuf::internal::ArenaStringPtr sequence_number_;
    bool success_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_messages_2eproto;
};// -------------------------------------------------------------------

class Metric final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:aws.kinesis.protobuf.Metric) */ {
 public:
  inline Metric() : Metric(nullptr) {}
  ~Metric() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR Metric(::google::protobuf::internal::ConstantInitialized);

  inline Metric(const Metric& from)
      : Metric(nullptr, from) {}
  Metric(Metric&& from) noexcept
    : Metric() {
    *this = ::std::move(from);
  }

  inline Metric& operator=(const Metric& from) {
    CopyFrom(from);
    return *this;
  }
  inline Metric& operator=(Metric&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Metric& default_instance() {
    return *internal_default_instance();
  }
  static inline const Metric* internal_default_instance() {
    return reinterpret_cast<const Metric*>(
               &_Metric_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(Metric& a, Metric& b) {
    a.Swap(&b);
  }
  inline void Swap(Metric* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Metric* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Metric* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Metric>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Metric& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const Metric& from) {
    Metric::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(Metric* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "aws.kinesis.protobuf.Metric";
  }
  protected:
  explicit Metric(::google::protobuf::Arena* arena);
  Metric(::google::protobuf::Arena* arena, const Metric& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDimensionsFieldNumber = 2,
    kNameFieldNumber = 1,
    kStatsFieldNumber = 3,
    kSecondsFieldNumber = 4,
  };
  // repeated .aws.kinesis.protobuf.Dimension dimensions = 2;
  int dimensions_size() const;
  private:
  int _internal_dimensions_size() const;

  public:
  void clear_dimensions() ;
  ::aws::kinesis::protobuf::Dimension* mutable_dimensions(int index);
  ::google::protobuf::RepeatedPtrField< ::aws::kinesis::protobuf::Dimension >*
      mutable_dimensions();
  private:
  const ::google::protobuf::RepeatedPtrField<::aws::kinesis::protobuf::Dimension>& _internal_dimensions() const;
  ::google::protobuf::RepeatedPtrField<::aws::kinesis::protobuf::Dimension>* _internal_mutable_dimensions();
  public:
  const ::aws::kinesis::protobuf::Dimension& dimensions(int index) const;
  ::aws::kinesis::protobuf::Dimension* add_dimensions();
  const ::google::protobuf::RepeatedPtrField< ::aws::kinesis::protobuf::Dimension >&
      dimensions() const;
  // required string name = 1;
  bool has_name() const;
  void clear_name() ;
  const std::string& name() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_name(Arg_&& arg, Args_... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* value);

  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(
      const std::string& value);
  std::string* _internal_mutable_name();

  public:
  // required .aws.kinesis.protobuf.Stats stats = 3;
  bool has_stats() const;
  void clear_stats() ;
  const ::aws::kinesis::protobuf::Stats& stats() const;
  PROTOBUF_NODISCARD ::aws::kinesis::protobuf::Stats* release_stats();
  ::aws::kinesis::protobuf::Stats* mutable_stats();
  void set_allocated_stats(::aws::kinesis::protobuf::Stats* value);
  void unsafe_arena_set_allocated_stats(::aws::kinesis::protobuf::Stats* value);
  ::aws::kinesis::protobuf::Stats* unsafe_arena_release_stats();

  private:
  const ::aws::kinesis::protobuf::Stats& _internal_stats() const;
  ::aws::kinesis::protobuf::Stats* _internal_mutable_stats();

  public:
  // required uint64 seconds = 4;
  bool has_seconds() const;
  void clear_seconds() ;
  ::uint64_t seconds() const;
  void set_seconds(::uint64_t value);

  private:
  ::uint64_t _internal_seconds() const;
  void _internal_set_seconds(::uint64_t value);

  public:
  // @@protoc_insertion_point(class_scope:aws.kinesis.protobuf.Metric)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 4, 2,
      40, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::RepeatedPtrField< ::aws::kinesis::protobuf::Dimension > dimensions_;
    ::google::protobuf::internal::ArenaStringPtr name_;
    ::aws::kinesis::protobuf::Stats* stats_;
    ::uint64_t seconds_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_messages_2eproto;
};// -------------------------------------------------------------------

class MetricsResponse final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:aws.kinesis.protobuf.MetricsResponse) */ {
 public:
  inline MetricsResponse() : MetricsResponse(nullptr) {}
  ~MetricsResponse() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR MetricsResponse(::google::protobuf::internal::ConstantInitialized);

  inline MetricsResponse(const MetricsResponse& from)
      : MetricsResponse(nullptr, from) {}
  MetricsResponse(MetricsResponse&& from) noexcept
    : MetricsResponse() {
    *this = ::std::move(from);
  }

  inline MetricsResponse& operator=(const MetricsResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline MetricsResponse& operator=(MetricsResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MetricsResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const MetricsResponse* internal_default_instance() {
    return reinterpret_cast<const MetricsResponse*>(
               &_MetricsResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(MetricsResponse& a, MetricsResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(MetricsResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MetricsResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MetricsResponse* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<MetricsResponse>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const MetricsResponse& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const MetricsResponse& from) {
    MetricsResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(MetricsResponse* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "aws.kinesis.protobuf.MetricsResponse";
  }
  protected:
  explicit MetricsResponse(::google::protobuf::Arena* arena);
  MetricsResponse(::google::protobuf::Arena* arena, const MetricsResponse& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMetricsFieldNumber = 1,
  };
  // repeated .aws.kinesis.protobuf.Metric metrics = 1;
  int metrics_size() const;
  private:
  int _internal_metrics_size() const;

  public:
  void clear_metrics() ;
  ::aws::kinesis::protobuf::Metric* mutable_metrics(int index);
  ::google::protobuf::RepeatedPtrField< ::aws::kinesis::protobuf::Metric >*
      mutable_metrics();
  private:
  const ::google::protobuf::RepeatedPtrField<::aws::kinesis::protobuf::Metric>& _internal_metrics() const;
  ::google::protobuf::RepeatedPtrField<::aws::kinesis::protobuf::Metric>* _internal_mutable_metrics();
  public:
  const ::aws::kinesis::protobuf::Metric& metrics(int index) const;
  ::aws::kinesis::protobuf::Metric* add_metrics();
  const ::google::protobuf::RepeatedPtrField< ::aws::kinesis::protobuf::Metric >&
      metrics() const;
  // @@protoc_insertion_point(class_scope:aws.kinesis.protobuf.MetricsResponse)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 1,
      0, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::RepeatedPtrField< ::aws::kinesis::protobuf::Metric > metrics_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_messages_2eproto;
};// -------------------------------------------------------------------

class AggregatedRecord final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:aws.kinesis.protobuf.AggregatedRecord) */ {
 public:
  inline AggregatedRecord() : AggregatedRecord(nullptr) {}
  ~AggregatedRecord() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR AggregatedRecord(::google::protobuf::internal::ConstantInitialized);

  inline AggregatedRecord(const AggregatedRecord& from)
      : AggregatedRecord(nullptr, from) {}
  AggregatedRecord(AggregatedRecord&& from) noexcept
    : AggregatedRecord() {
    *this = ::std::move(from);
  }

  inline AggregatedRecord& operator=(const AggregatedRecord& from) {
    CopyFrom(from);
    return *this;
  }
  inline AggregatedRecord& operator=(AggregatedRecord&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AggregatedRecord& default_instance() {
    return *internal_default_instance();
  }
  static inline const AggregatedRecord* internal_default_instance() {
    return reinterpret_cast<const AggregatedRecord*>(
               &_AggregatedRecord_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(AggregatedRecord& a, AggregatedRecord& b) {
    a.Swap(&b);
  }
  inline void Swap(AggregatedRecord* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AggregatedRecord* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  AggregatedRecord* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<AggregatedRecord>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const AggregatedRecord& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const AggregatedRecord& from) {
    AggregatedRecord::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(AggregatedRecord* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "aws.kinesis.protobuf.AggregatedRecord";
  }
  protected:
  explicit AggregatedRecord(::google::protobuf::Arena* arena);
  AggregatedRecord(::google::protobuf::Arena* arena, const AggregatedRecord& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPartitionKeyTableFieldNumber = 1,
    kExplicitHashKeyTableFieldNumber = 2,
    kRecordsFieldNumber = 3,
  };
  // repeated string partition_key_table = 1;
  int partition_key_table_size() const;
  private:
  int _internal_partition_key_table_size() const;

  public:
  void clear_partition_key_table() ;
  const std::string& partition_key_table(int index) const;
  std::string* mutable_partition_key_table(int index);
  void set_partition_key_table(int index, const std::string& value);
  void set_partition_key_table(int index, std::string&& value);
  void set_partition_key_table(int index, const char* value);
  void set_partition_key_table(int index, const char* value, std::size_t size);
  void set_partition_key_table(int index, absl::string_view value);
  std::string* add_partition_key_table();
  void add_partition_key_table(const std::string& value);
  void add_partition_key_table(std::string&& value);
  void add_partition_key_table(const char* value);
  void add_partition_key_table(const char* value, std::size_t size);
  void add_partition_key_table(absl::string_view value);
  const ::google::protobuf::RepeatedPtrField<std::string>& partition_key_table() const;
  ::google::protobuf::RepeatedPtrField<std::string>* mutable_partition_key_table();

  private:
  const ::google::protobuf::RepeatedPtrField<std::string>& _internal_partition_key_table() const;
  ::google::protobuf::RepeatedPtrField<std::string>* _internal_mutable_partition_key_table();

  public:
  // repeated string explicit_hash_key_table = 2;
  int explicit_hash_key_table_size() const;
  private:
  int _internal_explicit_hash_key_table_size() const;

  public:
  void clear_explicit_hash_key_table() ;
  const std::string& explicit_hash_key_table(int index) const;
  std::string* mutable_explicit_hash_key_table(int index);
  void set_explicit_hash_key_table(int index, const std::string& value);
  void set_explicit_hash_key_table(int index, std::string&& value);
  void set_explicit_hash_key_table(int index, const char* value);
  void set_explicit_hash_key_table(int index, const char* value, std::size_t size);
  void set_explicit_hash_key_table(int index, absl::string_view value);
  std::string* add_explicit_hash_key_table();
  void add_explicit_hash_key_table(const std::string& value);
  void add_explicit_hash_key_table(std::string&& value);
  void add_explicit_hash_key_table(const char* value);
  void add_explicit_hash_key_table(const char* value, std::size_t size);
  void add_explicit_hash_key_table(absl::string_view value);
  const ::google::protobuf::RepeatedPtrField<std::string>& explicit_hash_key_table() const;
  ::google::protobuf::RepeatedPtrField<std::string>* mutable_explicit_hash_key_table();

  private:
  const ::google::protobuf::RepeatedPtrField<std::string>& _internal_explicit_hash_key_table() const;
  ::google::protobuf::RepeatedPtrField<std::string>* _internal_mutable_explicit_hash_key_table();

  public:
  // repeated .aws.kinesis.protobuf.Record records = 3;
  int records_size() const;
  private:
  int _internal_records_size() const;

  public:
  void clear_records() ;
  ::aws::kinesis::protobuf::Record* mutable_records(int index);
  ::google::protobuf::RepeatedPtrField< ::aws::kinesis::protobuf::Record >*
      mutable_records();
  private:
  const ::google::protobuf::RepeatedPtrField<::aws::kinesis::protobuf::Record>& _internal_records() const;
  ::google::protobuf::RepeatedPtrField<::aws::kinesis::protobuf::Record>* _internal_mutable_records();
  public:
  const ::aws::kinesis::protobuf::Record& records(int index) const;
  ::aws::kinesis::protobuf::Record* add_records();
  const ::google::protobuf::RepeatedPtrField< ::aws::kinesis::protobuf::Record >&
      records() const;
  // @@protoc_insertion_point(class_scope:aws.kinesis.protobuf.AggregatedRecord)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 3, 1,
      88, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::RepeatedPtrField<std::string> partition_key_table_;
    ::google::protobuf::RepeatedPtrField<std::string> explicit_hash_key_table_;
    ::google::protobuf::RepeatedPtrField< ::aws::kinesis::protobuf::Record > records_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_messages_2eproto;
};// -------------------------------------------------------------------

class Message final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:aws.kinesis.protobuf.Message) */ {
 public:
  inline Message() : Message(nullptr) {}
  ~Message() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR Message(::google::protobuf::internal::ConstantInitialized);

  inline Message(const Message& from)
      : Message(nullptr, from) {}
  Message(Message&& from) noexcept
    : Message() {
    *this = ::std::move(from);
  }

  inline Message& operator=(const Message& from) {
    CopyFrom(from);
    return *this;
  }
  inline Message& operator=(Message&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Message& default_instance() {
    return *internal_default_instance();
  }
  enum ActualMessageCase {
    kPutRecord = 3,
    kFlush = 4,
    kPutRecordResult = 5,
    kConfiguration = 6,
    kMetricsRequest = 7,
    kMetricsResponse = 8,
    kSetCredentials = 9,
    ACTUAL_MESSAGE_NOT_SET = 0,
  };

  static inline const Message* internal_default_instance() {
    return reinterpret_cast<const Message*>(
               &_Message_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(Message& a, Message& b) {
    a.Swap(&b);
  }
  inline void Swap(Message* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Message* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Message* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Message>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Message& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const Message& from) {
    Message::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(Message* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "aws.kinesis.protobuf.Message";
  }
  protected:
  explicit Message(::google::protobuf::Arena* arena);
  Message(::google::protobuf::Arena* arena, const Message& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
    kSourceIdFieldNumber = 2,
    kPutRecordFieldNumber = 3,
    kFlushFieldNumber = 4,
    kPutRecordResultFieldNumber = 5,
    kConfigurationFieldNumber = 6,
    kMetricsRequestFieldNumber = 7,
    kMetricsResponseFieldNumber = 8,
    kSetCredentialsFieldNumber = 9,
  };
  // required uint64 id = 1;
  bool has_id() const;
  void clear_id() ;
  ::uint64_t id() const;
  void set_id(::uint64_t value);

  private:
  ::uint64_t _internal_id() const;
  void _internal_set_id(::uint64_t value);

  public:
  // optional uint64 source_id = 2;
  bool has_source_id() const;
  void clear_source_id() ;
  ::uint64_t source_id() const;
  void set_source_id(::uint64_t value);

  private:
  ::uint64_t _internal_source_id() const;
  void _internal_set_source_id(::uint64_t value);

  public:
  // .aws.kinesis.protobuf.PutRecord put_record = 3;
  bool has_put_record() const;
  private:
  bool _internal_has_put_record() const;

  public:
  void clear_put_record() ;
  const ::aws::kinesis::protobuf::PutRecord& put_record() const;
  PROTOBUF_NODISCARD ::aws::kinesis::protobuf::PutRecord* release_put_record();
  ::aws::kinesis::protobuf::PutRecord* mutable_put_record();
  void set_allocated_put_record(::aws::kinesis::protobuf::PutRecord* value);
  void unsafe_arena_set_allocated_put_record(::aws::kinesis::protobuf::PutRecord* value);
  ::aws::kinesis::protobuf::PutRecord* unsafe_arena_release_put_record();

  private:
  const ::aws::kinesis::protobuf::PutRecord& _internal_put_record() const;
  ::aws::kinesis::protobuf::PutRecord* _internal_mutable_put_record();

  public:
  // .aws.kinesis.protobuf.Flush flush = 4;
  bool has_flush() const;
  private:
  bool _internal_has_flush() const;

  public:
  void clear_flush() ;
  const ::aws::kinesis::protobuf::Flush& flush() const;
  PROTOBUF_NODISCARD ::aws::kinesis::protobuf::Flush* release_flush();
  ::aws::kinesis::protobuf::Flush* mutable_flush();
  void set_allocated_flush(::aws::kinesis::protobuf::Flush* value);
  void unsafe_arena_set_allocated_flush(::aws::kinesis::protobuf::Flush* value);
  ::aws::kinesis::protobuf::Flush* unsafe_arena_release_flush();

  private:
  const ::aws::kinesis::protobuf::Flush& _internal_flush() const;
  ::aws::kinesis::protobuf::Flush* _internal_mutable_flush();

  public:
  // .aws.kinesis.protobuf.PutRecordResult put_record_result = 5;
  bool has_put_record_result() const;
  private:
  bool _internal_has_put_record_result() const;

  public:
  void clear_put_record_result() ;
  const ::aws::kinesis::protobuf::PutRecordResult& put_record_result() const;
  PROTOBUF_NODISCARD ::aws::kinesis::protobuf::PutRecordResult* release_put_record_result();
  ::aws::kinesis::protobuf::PutRecordResult* mutable_put_record_result();
  void set_allocated_put_record_result(::aws::kinesis::protobuf::PutRecordResult* value);
  void unsafe_arena_set_allocated_put_record_result(::aws::kinesis::protobuf::PutRecordResult* value);
  ::aws::kinesis::protobuf::PutRecordResult* unsafe_arena_release_put_record_result();

  private:
  const ::aws::kinesis::protobuf::PutRecordResult& _internal_put_record_result() const;
  ::aws::kinesis::protobuf::PutRecordResult* _internal_mutable_put_record_result();

  public:
  // .aws.kinesis.protobuf.Configuration configuration = 6;
  bool has_configuration() const;
  private:
  bool _internal_has_configuration() const;

  public:
  void clear_configuration() ;
  const ::aws::kinesis::protobuf::Configuration& configuration() const;
  PROTOBUF_NODISCARD ::aws::kinesis::protobuf::Configuration* release_configuration();
  ::aws::kinesis::protobuf::Configuration* mutable_configuration();
  void set_allocated_configuration(::aws::kinesis::protobuf::Configuration* value);
  void unsafe_arena_set_allocated_configuration(::aws::kinesis::protobuf::Configuration* value);
  ::aws::kinesis::protobuf::Configuration* unsafe_arena_release_configuration();

  private:
  const ::aws::kinesis::protobuf::Configuration& _internal_configuration() const;
  ::aws::kinesis::protobuf::Configuration* _internal_mutable_configuration();

  public:
  // .aws.kinesis.protobuf.MetricsRequest metrics_request = 7;
  bool has_metrics_request() const;
  private:
  bool _internal_has_metrics_request() const;

  public:
  void clear_metrics_request() ;
  const ::aws::kinesis::protobuf::MetricsRequest& metrics_request() const;
  PROTOBUF_NODISCARD ::aws::kinesis::protobuf::MetricsRequest* release_metrics_request();
  ::aws::kinesis::protobuf::MetricsRequest* mutable_metrics_request();
  void set_allocated_metrics_request(::aws::kinesis::protobuf::MetricsRequest* value);
  void unsafe_arena_set_allocated_metrics_request(::aws::kinesis::protobuf::MetricsRequest* value);
  ::aws::kinesis::protobuf::MetricsRequest* unsafe_arena_release_metrics_request();

  private:
  const ::aws::kinesis::protobuf::MetricsRequest& _internal_metrics_request() const;
  ::aws::kinesis::protobuf::MetricsRequest* _internal_mutable_metrics_request();

  public:
  // .aws.kinesis.protobuf.MetricsResponse metrics_response = 8;
  bool has_metrics_response() const;
  private:
  bool _internal_has_metrics_response() const;

  public:
  void clear_metrics_response() ;
  const ::aws::kinesis::protobuf::MetricsResponse& metrics_response() const;
  PROTOBUF_NODISCARD ::aws::kinesis::protobuf::MetricsResponse* release_metrics_response();
  ::aws::kinesis::protobuf::MetricsResponse* mutable_metrics_response();
  void set_allocated_metrics_response(::aws::kinesis::protobuf::MetricsResponse* value);
  void unsafe_arena_set_allocated_metrics_response(::aws::kinesis::protobuf::MetricsResponse* value);
  ::aws::kinesis::protobuf::MetricsResponse* unsafe_arena_release_metrics_response();

  private:
  const ::aws::kinesis::protobuf::MetricsResponse& _internal_metrics_response() const;
  ::aws::kinesis::protobuf::MetricsResponse* _internal_mutable_metrics_response();

  public:
  // .aws.kinesis.protobuf.SetCredentials set_credentials = 9;
  bool has_set_credentials() const;
  private:
  bool _internal_has_set_credentials() const;

  public:
  void clear_set_credentials() ;
  const ::aws::kinesis::protobuf::SetCredentials& set_credentials() const;
  PROTOBUF_NODISCARD ::aws::kinesis::protobuf::SetCredentials* release_set_credentials();
  ::aws::kinesis::protobuf::SetCredentials* mutable_set_credentials();
  void set_allocated_set_credentials(::aws::kinesis::protobuf::SetCredentials* value);
  void unsafe_arena_set_allocated_set_credentials(::aws::kinesis::protobuf::SetCredentials* value);
  ::aws::kinesis::protobuf::SetCredentials* unsafe_arena_release_set_credentials();

  private:
  const ::aws::kinesis::protobuf::SetCredentials& _internal_set_credentials() const;
  ::aws::kinesis::protobuf::SetCredentials* _internal_mutable_set_credentials();

  public:
  void clear_actual_message();
  ActualMessageCase actual_message_case() const;
  // @@protoc_insertion_point(class_scope:aws.kinesis.protobuf.Message)
 private:
  class _Internal;
  void set_has_put_record();
  void set_has_flush();
  void set_has_put_record_result();
  void set_has_configuration();
  void set_has_metrics_request();
  void set_has_metrics_response();
  void set_has_set_credentials();

  inline bool has_actual_message() const;
  inline void clear_has_actual_message();

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 9, 7,
      0, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::uint64_t id_;
    ::uint64_t source_id_;
    union ActualMessageUnion {
      constexpr ActualMessageUnion() : _constinit_{} {}
        ::google::protobuf::internal::ConstantInitialized _constinit_;
      ::aws::kinesis::protobuf::PutRecord* put_record_;
      ::aws::kinesis::protobuf::Flush* flush_;
      ::aws::kinesis::protobuf::PutRecordResult* put_record_result_;
      ::aws::kinesis::protobuf::Configuration* configuration_;
      ::aws::kinesis::protobuf::MetricsRequest* metrics_request_;
      ::aws::kinesis::protobuf::MetricsResponse* metrics_response_;
      ::aws::kinesis::protobuf::SetCredentials* set_credentials_;
    } actual_message_;
    ::uint32_t _oneof_case_[1];

    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_messages_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// Tag

// required string key = 1;
inline bool Tag::has_key() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void Tag::clear_key() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.key_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& Tag::key() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:aws.kinesis.protobuf.Tag.key)
  return _internal_key();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Tag::set_key(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.key_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:aws.kinesis.protobuf.Tag.key)
}
inline std::string* Tag::mutable_key() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_key();
  // @@protoc_insertion_point(field_mutable:aws.kinesis.protobuf.Tag.key)
  return _s;
}
inline const std::string& Tag::_internal_key() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.key_.Get();
}
inline void Tag::_internal_set_key(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.key_.Set(value, GetArena());
}
inline std::string* Tag::_internal_mutable_key() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.key_.Mutable( GetArena());
}
inline std::string* Tag::release_key() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:aws.kinesis.protobuf.Tag.key)
  if ((_impl_._has_bits_[0] & 0x00000001u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* released = _impl_.key_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.key_.Set("", GetArena());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void Tag::set_allocated_key(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.key_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.key_.IsDefault()) {
          _impl_.key_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:aws.kinesis.protobuf.Tag.key)
}

// optional string value = 2;
inline bool Tag::has_value() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void Tag::clear_value() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.value_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const std::string& Tag::value() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:aws.kinesis.protobuf.Tag.value)
  return _internal_value();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Tag::set_value(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.value_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:aws.kinesis.protobuf.Tag.value)
}
inline std::string* Tag::mutable_value() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_value();
  // @@protoc_insertion_point(field_mutable:aws.kinesis.protobuf.Tag.value)
  return _s;
}
inline const std::string& Tag::_internal_value() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.value_.Get();
}
inline void Tag::_internal_set_value(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.value_.Set(value, GetArena());
}
inline std::string* Tag::_internal_mutable_value() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000002u;
  return _impl_.value_.Mutable( GetArena());
}
inline std::string* Tag::release_value() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:aws.kinesis.protobuf.Tag.value)
  if ((_impl_._has_bits_[0] & 0x00000002u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000002u;
  auto* released = _impl_.value_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.value_.Set("", GetArena());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void Tag::set_allocated_value(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.value_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.value_.IsDefault()) {
          _impl_.value_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:aws.kinesis.protobuf.Tag.value)
}

// -------------------------------------------------------------------

// Record

// required uint64 partition_key_index = 1;
inline bool Record::has_partition_key_index() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void Record::clear_partition_key_index() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.partition_key_index_ = ::uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline ::uint64_t Record::partition_key_index() const {
  // @@protoc_insertion_point(field_get:aws.kinesis.protobuf.Record.partition_key_index)
  return _internal_partition_key_index();
}
inline void Record::set_partition_key_index(::uint64_t value) {
  _internal_set_partition_key_index(value);
  // @@protoc_insertion_point(field_set:aws.kinesis.protobuf.Record.partition_key_index)
}
inline ::uint64_t Record::_internal_partition_key_index() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.partition_key_index_;
}
inline void Record::_internal_set_partition_key_index(::uint64_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.partition_key_index_ = value;
}

// optional uint64 explicit_hash_key_index = 2;
inline bool Record::has_explicit_hash_key_index() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline void Record::clear_explicit_hash_key_index() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.explicit_hash_key_index_ = ::uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline ::uint64_t Record::explicit_hash_key_index() const {
  // @@protoc_insertion_point(field_get:aws.kinesis.protobuf.Record.explicit_hash_key_index)
  return _internal_explicit_hash_key_index();
}
inline void Record::set_explicit_hash_key_index(::uint64_t value) {
  _internal_set_explicit_hash_key_index(value);
  // @@protoc_insertion_point(field_set:aws.kinesis.protobuf.Record.explicit_hash_key_index)
}
inline ::uint64_t Record::_internal_explicit_hash_key_index() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.explicit_hash_key_index_;
}
inline void Record::_internal_set_explicit_hash_key_index(::uint64_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.explicit_hash_key_index_ = value;
}

// required bytes data = 3;
inline bool Record::has_data() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void Record::clear_data() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.data_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& Record::data() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:aws.kinesis.protobuf.Record.data)
  return _internal_data();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Record::set_data(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.data_.SetBytes(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:aws.kinesis.protobuf.Record.data)
}
inline std::string* Record::mutable_data() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_data();
  // @@protoc_insertion_point(field_mutable:aws.kinesis.protobuf.Record.data)
  return _s;
}
inline const std::string& Record::_internal_data() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.data_.Get();
}
inline void Record::_internal_set_data(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.data_.Set(value, GetArena());
}
inline std::string* Record::_internal_mutable_data() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.data_.Mutable( GetArena());
}
inline std::string* Record::release_data() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:aws.kinesis.protobuf.Record.data)
  if ((_impl_._has_bits_[0] & 0x00000001u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* released = _impl_.data_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.data_.Set("", GetArena());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void Record::set_allocated_data(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.data_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.data_.IsDefault()) {
          _impl_.data_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:aws.kinesis.protobuf.Record.data)
}

// repeated .aws.kinesis.protobuf.Tag tags = 4;
inline int Record::_internal_tags_size() const {
  return _internal_tags().size();
}
inline int Record::tags_size() const {
  return _internal_tags_size();
}
inline void Record::clear_tags() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.tags_.Clear();
}
inline ::aws::kinesis::protobuf::Tag* Record::mutable_tags(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:aws.kinesis.protobuf.Record.tags)
  return _internal_mutable_tags()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::aws::kinesis::protobuf::Tag>* Record::mutable_tags()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:aws.kinesis.protobuf.Record.tags)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_tags();
}
inline const ::aws::kinesis::protobuf::Tag& Record::tags(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:aws.kinesis.protobuf.Record.tags)
  return _internal_tags().Get(index);
}
inline ::aws::kinesis::protobuf::Tag* Record::add_tags() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::aws::kinesis::protobuf::Tag* _add = _internal_mutable_tags()->Add();
  // @@protoc_insertion_point(field_add:aws.kinesis.protobuf.Record.tags)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::aws::kinesis::protobuf::Tag>& Record::tags() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:aws.kinesis.protobuf.Record.tags)
  return _internal_tags();
}
inline const ::google::protobuf::RepeatedPtrField<::aws::kinesis::protobuf::Tag>&
Record::_internal_tags() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.tags_;
}
inline ::google::protobuf::RepeatedPtrField<::aws::kinesis::protobuf::Tag>*
Record::_internal_mutable_tags() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.tags_;
}

// -------------------------------------------------------------------

// AggregatedRecord

// repeated string partition_key_table = 1;
inline int AggregatedRecord::_internal_partition_key_table_size() const {
  return _internal_partition_key_table().size();
}
inline int AggregatedRecord::partition_key_table_size() const {
  return _internal_partition_key_table_size();
}
inline void AggregatedRecord::clear_partition_key_table() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.partition_key_table_.Clear();
}
inline std::string* AggregatedRecord::add_partition_key_table()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  std::string* _s = _internal_mutable_partition_key_table()->Add();
  // @@protoc_insertion_point(field_add_mutable:aws.kinesis.protobuf.AggregatedRecord.partition_key_table)
  return _s;
}
inline const std::string& AggregatedRecord::partition_key_table(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:aws.kinesis.protobuf.AggregatedRecord.partition_key_table)
  return _internal_partition_key_table().Get(index);
}
inline std::string* AggregatedRecord::mutable_partition_key_table(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:aws.kinesis.protobuf.AggregatedRecord.partition_key_table)
  return _internal_mutable_partition_key_table()->Mutable(index);
}
inline void AggregatedRecord::set_partition_key_table(int index, const std::string& value) {
  _internal_mutable_partition_key_table()->Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:aws.kinesis.protobuf.AggregatedRecord.partition_key_table)
}
inline void AggregatedRecord::set_partition_key_table(int index, std::string&& value) {
  _internal_mutable_partition_key_table()->Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:aws.kinesis.protobuf.AggregatedRecord.partition_key_table)
}
inline void AggregatedRecord::set_partition_key_table(int index, const char* value) {
  ABSL_DCHECK(value != nullptr);
  _internal_mutable_partition_key_table()->Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:aws.kinesis.protobuf.AggregatedRecord.partition_key_table)
}
inline void AggregatedRecord::set_partition_key_table(int index, const char* value,
                              std::size_t size) {
  _internal_mutable_partition_key_table()->Mutable(index)->assign(
      reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:aws.kinesis.protobuf.AggregatedRecord.partition_key_table)
}
inline void AggregatedRecord::set_partition_key_table(int index, absl::string_view value) {
  _internal_mutable_partition_key_table()->Mutable(index)->assign(value.data(),
                                                     value.size());
  // @@protoc_insertion_point(field_set_string_piece:aws.kinesis.protobuf.AggregatedRecord.partition_key_table)
}
inline void AggregatedRecord::add_partition_key_table(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_partition_key_table()->Add()->assign(value);
  // @@protoc_insertion_point(field_add:aws.kinesis.protobuf.AggregatedRecord.partition_key_table)
}
inline void AggregatedRecord::add_partition_key_table(std::string&& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_partition_key_table()->Add(std::move(value));
  // @@protoc_insertion_point(field_add:aws.kinesis.protobuf.AggregatedRecord.partition_key_table)
}
inline void AggregatedRecord::add_partition_key_table(const char* value) {
  ABSL_DCHECK(value != nullptr);
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_partition_key_table()->Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:aws.kinesis.protobuf.AggregatedRecord.partition_key_table)
}
inline void AggregatedRecord::add_partition_key_table(const char* value, std::size_t size) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_partition_key_table()->Add()->assign(
      reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:aws.kinesis.protobuf.AggregatedRecord.partition_key_table)
}
inline void AggregatedRecord::add_partition_key_table(absl::string_view value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_partition_key_table()->Add()->assign(value.data(), value.size());
  // @@protoc_insertion_point(field_add_string_piece:aws.kinesis.protobuf.AggregatedRecord.partition_key_table)
}
inline const ::google::protobuf::RepeatedPtrField<std::string>&
AggregatedRecord::partition_key_table() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:aws.kinesis.protobuf.AggregatedRecord.partition_key_table)
  return _internal_partition_key_table();
}
inline ::google::protobuf::RepeatedPtrField<std::string>*
AggregatedRecord::mutable_partition_key_table() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:aws.kinesis.protobuf.AggregatedRecord.partition_key_table)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_partition_key_table();
}
inline const ::google::protobuf::RepeatedPtrField<std::string>&
AggregatedRecord::_internal_partition_key_table() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.partition_key_table_;
}
inline ::google::protobuf::RepeatedPtrField<std::string>*
AggregatedRecord::_internal_mutable_partition_key_table() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.partition_key_table_;
}

// repeated string explicit_hash_key_table = 2;
inline int AggregatedRecord::_internal_explicit_hash_key_table_size() const {
  return _internal_explicit_hash_key_table().size();
}
inline int AggregatedRecord::explicit_hash_key_table_size() const {
  return _internal_explicit_hash_key_table_size();
}
inline void AggregatedRecord::clear_explicit_hash_key_table() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.explicit_hash_key_table_.Clear();
}
inline std::string* AggregatedRecord::add_explicit_hash_key_table()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  std::string* _s = _internal_mutable_explicit_hash_key_table()->Add();
  // @@protoc_insertion_point(field_add_mutable:aws.kinesis.protobuf.AggregatedRecord.explicit_hash_key_table)
  return _s;
}
inline const std::string& AggregatedRecord::explicit_hash_key_table(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:aws.kinesis.protobuf.AggregatedRecord.explicit_hash_key_table)
  return _internal_explicit_hash_key_table().Get(index);
}
inline std::string* AggregatedRecord::mutable_explicit_hash_key_table(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:aws.kinesis.protobuf.AggregatedRecord.explicit_hash_key_table)
  return _internal_mutable_explicit_hash_key_table()->Mutable(index);
}
inline void AggregatedRecord::set_explicit_hash_key_table(int index, const std::string& value) {
  _internal_mutable_explicit_hash_key_table()->Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:aws.kinesis.protobuf.AggregatedRecord.explicit_hash_key_table)
}
inline void AggregatedRecord::set_explicit_hash_key_table(int index, std::string&& value) {
  _internal_mutable_explicit_hash_key_table()->Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:aws.kinesis.protobuf.AggregatedRecord.explicit_hash_key_table)
}
inline void AggregatedRecord::set_explicit_hash_key_table(int index, const char* value) {
  ABSL_DCHECK(value != nullptr);
  _internal_mutable_explicit_hash_key_table()->Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:aws.kinesis.protobuf.AggregatedRecord.explicit_hash_key_table)
}
inline void AggregatedRecord::set_explicit_hash_key_table(int index, const char* value,
                              std::size_t size) {
  _internal_mutable_explicit_hash_key_table()->Mutable(index)->assign(
      reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:aws.kinesis.protobuf.AggregatedRecord.explicit_hash_key_table)
}
inline void AggregatedRecord::set_explicit_hash_key_table(int index, absl::string_view value) {
  _internal_mutable_explicit_hash_key_table()->Mutable(index)->assign(value.data(),
                                                     value.size());
  // @@protoc_insertion_point(field_set_string_piece:aws.kinesis.protobuf.AggregatedRecord.explicit_hash_key_table)
}
inline void AggregatedRecord::add_explicit_hash_key_table(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_explicit_hash_key_table()->Add()->assign(value);
  // @@protoc_insertion_point(field_add:aws.kinesis.protobuf.AggregatedRecord.explicit_hash_key_table)
}
inline void AggregatedRecord::add_explicit_hash_key_table(std::string&& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_explicit_hash_key_table()->Add(std::move(value));
  // @@protoc_insertion_point(field_add:aws.kinesis.protobuf.AggregatedRecord.explicit_hash_key_table)
}
inline void AggregatedRecord::add_explicit_hash_key_table(const char* value) {
  ABSL_DCHECK(value != nullptr);
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_explicit_hash_key_table()->Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:aws.kinesis.protobuf.AggregatedRecord.explicit_hash_key_table)
}
inline void AggregatedRecord::add_explicit_hash_key_table(const char* value, std::size_t size) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_explicit_hash_key_table()->Add()->assign(
      reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:aws.kinesis.protobuf.AggregatedRecord.explicit_hash_key_table)
}
inline void AggregatedRecord::add_explicit_hash_key_table(absl::string_view value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_explicit_hash_key_table()->Add()->assign(value.data(), value.size());
  // @@protoc_insertion_point(field_add_string_piece:aws.kinesis.protobuf.AggregatedRecord.explicit_hash_key_table)
}
inline const ::google::protobuf::RepeatedPtrField<std::string>&
AggregatedRecord::explicit_hash_key_table() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:aws.kinesis.protobuf.AggregatedRecord.explicit_hash_key_table)
  return _internal_explicit_hash_key_table();
}
inline ::google::protobuf::RepeatedPtrField<std::string>*
AggregatedRecord::mutable_explicit_hash_key_table() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:aws.kinesis.protobuf.AggregatedRecord.explicit_hash_key_table)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_explicit_hash_key_table();
}
inline const ::google::protobuf::RepeatedPtrField<std::string>&
AggregatedRecord::_internal_explicit_hash_key_table() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.explicit_hash_key_table_;
}
inline ::google::protobuf::RepeatedPtrField<std::string>*
AggregatedRecord::_internal_mutable_explicit_hash_key_table() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.explicit_hash_key_table_;
}

// repeated .aws.kinesis.protobuf.Record records = 3;
inline int AggregatedRecord::_internal_records_size() const {
  return _internal_records().size();
}
inline int AggregatedRecord::records_size() const {
  return _internal_records_size();
}
inline void AggregatedRecord::clear_records() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.records_.Clear();
}
inline ::aws::kinesis::protobuf::Record* AggregatedRecord::mutable_records(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:aws.kinesis.protobuf.AggregatedRecord.records)
  return _internal_mutable_records()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::aws::kinesis::protobuf::Record>* AggregatedRecord::mutable_records()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:aws.kinesis.protobuf.AggregatedRecord.records)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_records();
}
inline const ::aws::kinesis::protobuf::Record& AggregatedRecord::records(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:aws.kinesis.protobuf.AggregatedRecord.records)
  return _internal_records().Get(index);
}
inline ::aws::kinesis::protobuf::Record* AggregatedRecord::add_records() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::aws::kinesis::protobuf::Record* _add = _internal_mutable_records()->Add();
  // @@protoc_insertion_point(field_add:aws.kinesis.protobuf.AggregatedRecord.records)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::aws::kinesis::protobuf::Record>& AggregatedRecord::records() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:aws.kinesis.protobuf.AggregatedRecord.records)
  return _internal_records();
}
inline const ::google::protobuf::RepeatedPtrField<::aws::kinesis::protobuf::Record>&
AggregatedRecord::_internal_records() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.records_;
}
inline ::google::protobuf::RepeatedPtrField<::aws::kinesis::protobuf::Record>*
AggregatedRecord::_internal_mutable_records() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.records_;
}

// -------------------------------------------------------------------

// Message

// required uint64 id = 1;
inline bool Message::has_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void Message::clear_id() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.id_ = ::uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline ::uint64_t Message::id() const {
  // @@protoc_insertion_point(field_get:aws.kinesis.protobuf.Message.id)
  return _internal_id();
}
inline void Message::set_id(::uint64_t value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:aws.kinesis.protobuf.Message.id)
}
inline ::uint64_t Message::_internal_id() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.id_;
}
inline void Message::_internal_set_id(::uint64_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.id_ = value;
}

// optional uint64 source_id = 2;
inline bool Message::has_source_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void Message::clear_source_id() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.source_id_ = ::uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline ::uint64_t Message::source_id() const {
  // @@protoc_insertion_point(field_get:aws.kinesis.protobuf.Message.source_id)
  return _internal_source_id();
}
inline void Message::set_source_id(::uint64_t value) {
  _internal_set_source_id(value);
  // @@protoc_insertion_point(field_set:aws.kinesis.protobuf.Message.source_id)
}
inline ::uint64_t Message::_internal_source_id() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.source_id_;
}
inline void Message::_internal_set_source_id(::uint64_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.source_id_ = value;
}

// .aws.kinesis.protobuf.PutRecord put_record = 3;
inline bool Message::has_put_record() const {
  return actual_message_case() == kPutRecord;
}
inline bool Message::_internal_has_put_record() const {
  return actual_message_case() == kPutRecord;
}
inline void Message::set_has_put_record() {
  _impl_._oneof_case_[0] = kPutRecord;
}
inline void Message::clear_put_record() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (actual_message_case() == kPutRecord) {
    if (GetArena() == nullptr) {
      delete _impl_.actual_message_.put_record_;
    }
    clear_has_actual_message();
  }
}
inline ::aws::kinesis::protobuf::PutRecord* Message::release_put_record() {
  // @@protoc_insertion_point(field_release:aws.kinesis.protobuf.Message.put_record)
  if (actual_message_case() == kPutRecord) {
    clear_has_actual_message();
    auto* temp = _impl_.actual_message_.put_record_;
    if (GetArena() != nullptr) {
      temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
    }
    _impl_.actual_message_.put_record_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::aws::kinesis::protobuf::PutRecord& Message::_internal_put_record() const {
  return actual_message_case() == kPutRecord ? *_impl_.actual_message_.put_record_ : reinterpret_cast<::aws::kinesis::protobuf::PutRecord&>(::aws::kinesis::protobuf::_PutRecord_default_instance_);
}
inline const ::aws::kinesis::protobuf::PutRecord& Message::put_record() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:aws.kinesis.protobuf.Message.put_record)
  return _internal_put_record();
}
inline ::aws::kinesis::protobuf::PutRecord* Message::unsafe_arena_release_put_record() {
  // @@protoc_insertion_point(field_unsafe_arena_release:aws.kinesis.protobuf.Message.put_record)
  if (actual_message_case() == kPutRecord) {
    clear_has_actual_message();
    auto* temp = _impl_.actual_message_.put_record_;
    _impl_.actual_message_.put_record_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Message::unsafe_arena_set_allocated_put_record(::aws::kinesis::protobuf::PutRecord* value) {
  // We rely on the oneof clear method to free the earlier contents
  // of this oneof. We can directly use the pointer we're given to
  // set the new value.
  clear_actual_message();
  if (value) {
    set_has_put_record();
    _impl_.actual_message_.put_record_ = value;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:aws.kinesis.protobuf.Message.put_record)
}
inline ::aws::kinesis::protobuf::PutRecord* Message::_internal_mutable_put_record() {
  if (actual_message_case() != kPutRecord) {
    clear_actual_message();
    set_has_put_record();
    _impl_.actual_message_.put_record_ = CreateMaybeMessage<::aws::kinesis::protobuf::PutRecord>(GetArena());
  }
  return _impl_.actual_message_.put_record_;
}
inline ::aws::kinesis::protobuf::PutRecord* Message::mutable_put_record() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::aws::kinesis::protobuf::PutRecord* _msg = _internal_mutable_put_record();
  // @@protoc_insertion_point(field_mutable:aws.kinesis.protobuf.Message.put_record)
  return _msg;
}

// .aws.kinesis.protobuf.Flush flush = 4;
inline bool Message::has_flush() const {
  return actual_message_case() == kFlush;
}
inline bool Message::_internal_has_flush() const {
  return actual_message_case() == kFlush;
}
inline void Message::set_has_flush() {
  _impl_._oneof_case_[0] = kFlush;
}
inline void Message::clear_flush() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (actual_message_case() == kFlush) {
    if (GetArena() == nullptr) {
      delete _impl_.actual_message_.flush_;
    }
    clear_has_actual_message();
  }
}
inline ::aws::kinesis::protobuf::Flush* Message::release_flush() {
  // @@protoc_insertion_point(field_release:aws.kinesis.protobuf.Message.flush)
  if (actual_message_case() == kFlush) {
    clear_has_actual_message();
    auto* temp = _impl_.actual_message_.flush_;
    if (GetArena() != nullptr) {
      temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
    }
    _impl_.actual_message_.flush_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::aws::kinesis::protobuf::Flush& Message::_internal_flush() const {
  return actual_message_case() == kFlush ? *_impl_.actual_message_.flush_ : reinterpret_cast<::aws::kinesis::protobuf::Flush&>(::aws::kinesis::protobuf::_Flush_default_instance_);
}
inline const ::aws::kinesis::protobuf::Flush& Message::flush() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:aws.kinesis.protobuf.Message.flush)
  return _internal_flush();
}
inline ::aws::kinesis::protobuf::Flush* Message::unsafe_arena_release_flush() {
  // @@protoc_insertion_point(field_unsafe_arena_release:aws.kinesis.protobuf.Message.flush)
  if (actual_message_case() == kFlush) {
    clear_has_actual_message();
    auto* temp = _impl_.actual_message_.flush_;
    _impl_.actual_message_.flush_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Message::unsafe_arena_set_allocated_flush(::aws::kinesis::protobuf::Flush* value) {
  // We rely on the oneof clear method to free the earlier contents
  // of this oneof. We can directly use the pointer we're given to
  // set the new value.
  clear_actual_message();
  if (value) {
    set_has_flush();
    _impl_.actual_message_.flush_ = value;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:aws.kinesis.protobuf.Message.flush)
}
inline ::aws::kinesis::protobuf::Flush* Message::_internal_mutable_flush() {
  if (actual_message_case() != kFlush) {
    clear_actual_message();
    set_has_flush();
    _impl_.actual_message_.flush_ = CreateMaybeMessage<::aws::kinesis::protobuf::Flush>(GetArena());
  }
  return _impl_.actual_message_.flush_;
}
inline ::aws::kinesis::protobuf::Flush* Message::mutable_flush() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::aws::kinesis::protobuf::Flush* _msg = _internal_mutable_flush();
  // @@protoc_insertion_point(field_mutable:aws.kinesis.protobuf.Message.flush)
  return _msg;
}

// .aws.kinesis.protobuf.PutRecordResult put_record_result = 5;
inline bool Message::has_put_record_result() const {
  return actual_message_case() == kPutRecordResult;
}
inline bool Message::_internal_has_put_record_result() const {
  return actual_message_case() == kPutRecordResult;
}
inline void Message::set_has_put_record_result() {
  _impl_._oneof_case_[0] = kPutRecordResult;
}
inline void Message::clear_put_record_result() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (actual_message_case() == kPutRecordResult) {
    if (GetArena() == nullptr) {
      delete _impl_.actual_message_.put_record_result_;
    }
    clear_has_actual_message();
  }
}
inline ::aws::kinesis::protobuf::PutRecordResult* Message::release_put_record_result() {
  // @@protoc_insertion_point(field_release:aws.kinesis.protobuf.Message.put_record_result)
  if (actual_message_case() == kPutRecordResult) {
    clear_has_actual_message();
    auto* temp = _impl_.actual_message_.put_record_result_;
    if (GetArena() != nullptr) {
      temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
    }
    _impl_.actual_message_.put_record_result_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::aws::kinesis::protobuf::PutRecordResult& Message::_internal_put_record_result() const {
  return actual_message_case() == kPutRecordResult ? *_impl_.actual_message_.put_record_result_ : reinterpret_cast<::aws::kinesis::protobuf::PutRecordResult&>(::aws::kinesis::protobuf::_PutRecordResult_default_instance_);
}
inline const ::aws::kinesis::protobuf::PutRecordResult& Message::put_record_result() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:aws.kinesis.protobuf.Message.put_record_result)
  return _internal_put_record_result();
}
inline ::aws::kinesis::protobuf::PutRecordResult* Message::unsafe_arena_release_put_record_result() {
  // @@protoc_insertion_point(field_unsafe_arena_release:aws.kinesis.protobuf.Message.put_record_result)
  if (actual_message_case() == kPutRecordResult) {
    clear_has_actual_message();
    auto* temp = _impl_.actual_message_.put_record_result_;
    _impl_.actual_message_.put_record_result_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Message::unsafe_arena_set_allocated_put_record_result(::aws::kinesis::protobuf::PutRecordResult* value) {
  // We rely on the oneof clear method to free the earlier contents
  // of this oneof. We can directly use the pointer we're given to
  // set the new value.
  clear_actual_message();
  if (value) {
    set_has_put_record_result();
    _impl_.actual_message_.put_record_result_ = value;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:aws.kinesis.protobuf.Message.put_record_result)
}
inline ::aws::kinesis::protobuf::PutRecordResult* Message::_internal_mutable_put_record_result() {
  if (actual_message_case() != kPutRecordResult) {
    clear_actual_message();
    set_has_put_record_result();
    _impl_.actual_message_.put_record_result_ = CreateMaybeMessage<::aws::kinesis::protobuf::PutRecordResult>(GetArena());
  }
  return _impl_.actual_message_.put_record_result_;
}
inline ::aws::kinesis::protobuf::PutRecordResult* Message::mutable_put_record_result() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::aws::kinesis::protobuf::PutRecordResult* _msg = _internal_mutable_put_record_result();
  // @@protoc_insertion_point(field_mutable:aws.kinesis.protobuf.Message.put_record_result)
  return _msg;
}

// .aws.kinesis.protobuf.Configuration configuration = 6;
inline bool Message::has_configuration() const {
  return actual_message_case() == kConfiguration;
}
inline bool Message::_internal_has_configuration() const {
  return actual_message_case() == kConfiguration;
}
inline void Message::set_has_configuration() {
  _impl_._oneof_case_[0] = kConfiguration;
}
inline ::aws::kinesis::protobuf::Configuration* Message::release_configuration() {
  // @@protoc_insertion_point(field_release:aws.kinesis.protobuf.Message.configuration)
  if (actual_message_case() == kConfiguration) {
    clear_has_actual_message();
    auto* temp = _impl_.actual_message_.configuration_;
    if (GetArena() != nullptr) {
      temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
    }
    _impl_.actual_message_.configuration_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::aws::kinesis::protobuf::Configuration& Message::_internal_configuration() const {
  return actual_message_case() == kConfiguration ? *_impl_.actual_message_.configuration_ : reinterpret_cast<::aws::kinesis::protobuf::Configuration&>(::aws::kinesis::protobuf::_Configuration_default_instance_);
}
inline const ::aws::kinesis::protobuf::Configuration& Message::configuration() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:aws.kinesis.protobuf.Message.configuration)
  return _internal_configuration();
}
inline ::aws::kinesis::protobuf::Configuration* Message::unsafe_arena_release_configuration() {
  // @@protoc_insertion_point(field_unsafe_arena_release:aws.kinesis.protobuf.Message.configuration)
  if (actual_message_case() == kConfiguration) {
    clear_has_actual_message();
    auto* temp = _impl_.actual_message_.configuration_;
    _impl_.actual_message_.configuration_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Message::unsafe_arena_set_allocated_configuration(::aws::kinesis::protobuf::Configuration* value) {
  // We rely on the oneof clear method to free the earlier contents
  // of this oneof. We can directly use the pointer we're given to
  // set the new value.
  clear_actual_message();
  if (value) {
    set_has_configuration();
    _impl_.actual_message_.configuration_ = value;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:aws.kinesis.protobuf.Message.configuration)
}
inline ::aws::kinesis::protobuf::Configuration* Message::_internal_mutable_configuration() {
  if (actual_message_case() != kConfiguration) {
    clear_actual_message();
    set_has_configuration();
    _impl_.actual_message_.configuration_ = CreateMaybeMessage<::aws::kinesis::protobuf::Configuration>(GetArena());
  }
  return _impl_.actual_message_.configuration_;
}
inline ::aws::kinesis::protobuf::Configuration* Message::mutable_configuration() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::aws::kinesis::protobuf::Configuration* _msg = _internal_mutable_configuration();
  // @@protoc_insertion_point(field_mutable:aws.kinesis.protobuf.Message.configuration)
  return _msg;
}

// .aws.kinesis.protobuf.MetricsRequest metrics_request = 7;
inline bool Message::has_metrics_request() const {
  return actual_message_case() == kMetricsRequest;
}
inline bool Message::_internal_has_metrics_request() const {
  return actual_message_case() == kMetricsRequest;
}
inline void Message::set_has_metrics_request() {
  _impl_._oneof_case_[0] = kMetricsRequest;
}
inline void Message::clear_metrics_request() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (actual_message_case() == kMetricsRequest) {
    if (GetArena() == nullptr) {
      delete _impl_.actual_message_.metrics_request_;
    }
    clear_has_actual_message();
  }
}
inline ::aws::kinesis::protobuf::MetricsRequest* Message::release_metrics_request() {
  // @@protoc_insertion_point(field_release:aws.kinesis.protobuf.Message.metrics_request)
  if (actual_message_case() == kMetricsRequest) {
    clear_has_actual_message();
    auto* temp = _impl_.actual_message_.metrics_request_;
    if (GetArena() != nullptr) {
      temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
    }
    _impl_.actual_message_.metrics_request_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::aws::kinesis::protobuf::MetricsRequest& Message::_internal_metrics_request() const {
  return actual_message_case() == kMetricsRequest ? *_impl_.actual_message_.metrics_request_ : reinterpret_cast<::aws::kinesis::protobuf::MetricsRequest&>(::aws::kinesis::protobuf::_MetricsRequest_default_instance_);
}
inline const ::aws::kinesis::protobuf::MetricsRequest& Message::metrics_request() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:aws.kinesis.protobuf.Message.metrics_request)
  return _internal_metrics_request();
}
inline ::aws::kinesis::protobuf::MetricsRequest* Message::unsafe_arena_release_metrics_request() {
  // @@protoc_insertion_point(field_unsafe_arena_release:aws.kinesis.protobuf.Message.metrics_request)
  if (actual_message_case() == kMetricsRequest) {
    clear_has_actual_message();
    auto* temp = _impl_.actual_message_.metrics_request_;
    _impl_.actual_message_.metrics_request_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Message::unsafe_arena_set_allocated_metrics_request(::aws::kinesis::protobuf::MetricsRequest* value) {
  // We rely on the oneof clear method to free the earlier contents
  // of this oneof. We can directly use the pointer we're given to
  // set the new value.
  clear_actual_message();
  if (value) {
    set_has_metrics_request();
    _impl_.actual_message_.metrics_request_ = value;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:aws.kinesis.protobuf.Message.metrics_request)
}
inline ::aws::kinesis::protobuf::MetricsRequest* Message::_internal_mutable_metrics_request() {
  if (actual_message_case() != kMetricsRequest) {
    clear_actual_message();
    set_has_metrics_request();
    _impl_.actual_message_.metrics_request_ = CreateMaybeMessage<::aws::kinesis::protobuf::MetricsRequest>(GetArena());
  }
  return _impl_.actual_message_.metrics_request_;
}
inline ::aws::kinesis::protobuf::MetricsRequest* Message::mutable_metrics_request() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::aws::kinesis::protobuf::MetricsRequest* _msg = _internal_mutable_metrics_request();
  // @@protoc_insertion_point(field_mutable:aws.kinesis.protobuf.Message.metrics_request)
  return _msg;
}

// .aws.kinesis.protobuf.MetricsResponse metrics_response = 8;
inline bool Message::has_metrics_response() const {
  return actual_message_case() == kMetricsResponse;
}
inline bool Message::_internal_has_metrics_response() const {
  return actual_message_case() == kMetricsResponse;
}
inline void Message::set_has_metrics_response() {
  _impl_._oneof_case_[0] = kMetricsResponse;
}
inline void Message::clear_metrics_response() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (actual_message_case() == kMetricsResponse) {
    if (GetArena() == nullptr) {
      delete _impl_.actual_message_.metrics_response_;
    }
    clear_has_actual_message();
  }
}
inline ::aws::kinesis::protobuf::MetricsResponse* Message::release_metrics_response() {
  // @@protoc_insertion_point(field_release:aws.kinesis.protobuf.Message.metrics_response)
  if (actual_message_case() == kMetricsResponse) {
    clear_has_actual_message();
    auto* temp = _impl_.actual_message_.metrics_response_;
    if (GetArena() != nullptr) {
      temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
    }
    _impl_.actual_message_.metrics_response_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::aws::kinesis::protobuf::MetricsResponse& Message::_internal_metrics_response() const {
  return actual_message_case() == kMetricsResponse ? *_impl_.actual_message_.metrics_response_ : reinterpret_cast<::aws::kinesis::protobuf::MetricsResponse&>(::aws::kinesis::protobuf::_MetricsResponse_default_instance_);
}
inline const ::aws::kinesis::protobuf::MetricsResponse& Message::metrics_response() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:aws.kinesis.protobuf.Message.metrics_response)
  return _internal_metrics_response();
}
inline ::aws::kinesis::protobuf::MetricsResponse* Message::unsafe_arena_release_metrics_response() {
  // @@protoc_insertion_point(field_unsafe_arena_release:aws.kinesis.protobuf.Message.metrics_response)
  if (actual_message_case() == kMetricsResponse) {
    clear_has_actual_message();
    auto* temp = _impl_.actual_message_.metrics_response_;
    _impl_.actual_message_.metrics_response_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Message::unsafe_arena_set_allocated_metrics_response(::aws::kinesis::protobuf::MetricsResponse* value) {
  // We rely on the oneof clear method to free the earlier contents
  // of this oneof. We can directly use the pointer we're given to
  // set the new value.
  clear_actual_message();
  if (value) {
    set_has_metrics_response();
    _impl_.actual_message_.metrics_response_ = value;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:aws.kinesis.protobuf.Message.metrics_response)
}
inline ::aws::kinesis::protobuf::MetricsResponse* Message::_internal_mutable_metrics_response() {
  if (actual_message_case() != kMetricsResponse) {
    clear_actual_message();
    set_has_metrics_response();
    _impl_.actual_message_.metrics_response_ = CreateMaybeMessage<::aws::kinesis::protobuf::MetricsResponse>(GetArena());
  }
  return _impl_.actual_message_.metrics_response_;
}
inline ::aws::kinesis::protobuf::MetricsResponse* Message::mutable_metrics_response() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::aws::kinesis::protobuf::MetricsResponse* _msg = _internal_mutable_metrics_response();
  // @@protoc_insertion_point(field_mutable:aws.kinesis.protobuf.Message.metrics_response)
  return _msg;
}

// .aws.kinesis.protobuf.SetCredentials set_credentials = 9;
inline bool Message::has_set_credentials() const {
  return actual_message_case() == kSetCredentials;
}
inline bool Message::_internal_has_set_credentials() const {
  return actual_message_case() == kSetCredentials;
}
inline void Message::set_has_set_credentials() {
  _impl_._oneof_case_[0] = kSetCredentials;
}
inline void Message::clear_set_credentials() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (actual_message_case() == kSetCredentials) {
    if (GetArena() == nullptr) {
      delete _impl_.actual_message_.set_credentials_;
    }
    clear_has_actual_message();
  }
}
inline ::aws::kinesis::protobuf::SetCredentials* Message::release_set_credentials() {
  // @@protoc_insertion_point(field_release:aws.kinesis.protobuf.Message.set_credentials)
  if (actual_message_case() == kSetCredentials) {
    clear_has_actual_message();
    auto* temp = _impl_.actual_message_.set_credentials_;
    if (GetArena() != nullptr) {
      temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
    }
    _impl_.actual_message_.set_credentials_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::aws::kinesis::protobuf::SetCredentials& Message::_internal_set_credentials() const {
  return actual_message_case() == kSetCredentials ? *_impl_.actual_message_.set_credentials_ : reinterpret_cast<::aws::kinesis::protobuf::SetCredentials&>(::aws::kinesis::protobuf::_SetCredentials_default_instance_);
}
inline const ::aws::kinesis::protobuf::SetCredentials& Message::set_credentials() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:aws.kinesis.protobuf.Message.set_credentials)
  return _internal_set_credentials();
}
inline ::aws::kinesis::protobuf::SetCredentials* Message::unsafe_arena_release_set_credentials() {
  // @@protoc_insertion_point(field_unsafe_arena_release:aws.kinesis.protobuf.Message.set_credentials)
  if (actual_message_case() == kSetCredentials) {
    clear_has_actual_message();
    auto* temp = _impl_.actual_message_.set_credentials_;
    _impl_.actual_message_.set_credentials_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Message::unsafe_arena_set_allocated_set_credentials(::aws::kinesis::protobuf::SetCredentials* value) {
  // We rely on the oneof clear method to free the earlier contents
  // of this oneof. We can directly use the pointer we're given to
  // set the new value.
  clear_actual_message();
  if (value) {
    set_has_set_credentials();
    _impl_.actual_message_.set_credentials_ = value;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:aws.kinesis.protobuf.Message.set_credentials)
}
inline ::aws::kinesis::protobuf::SetCredentials* Message::_internal_mutable_set_credentials() {
  if (actual_message_case() != kSetCredentials) {
    clear_actual_message();
    set_has_set_credentials();
    _impl_.actual_message_.set_credentials_ = CreateMaybeMessage<::aws::kinesis::protobuf::SetCredentials>(GetArena());
  }
  return _impl_.actual_message_.set_credentials_;
}
inline ::aws::kinesis::protobuf::SetCredentials* Message::mutable_set_credentials() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::aws::kinesis::protobuf::SetCredentials* _msg = _internal_mutable_set_credentials();
  // @@protoc_insertion_point(field_mutable:aws.kinesis.protobuf.Message.set_credentials)
  return _msg;
}

inline bool Message::has_actual_message() const {
  return actual_message_case() != ACTUAL_MESSAGE_NOT_SET;
}
inline void Message::clear_has_actual_message() {
  _impl_._oneof_case_[0] = ACTUAL_MESSAGE_NOT_SET;
}
inline Message::ActualMessageCase Message::actual_message_case() const {
  return Message::ActualMessageCase(_impl_._oneof_case_[0]);
}
// -------------------------------------------------------------------

// PutRecord

// required string stream_name = 1;
inline bool PutRecord::has_stream_name() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void PutRecord::clear_stream_name() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.stream_name_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& PutRecord::stream_name() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:aws.kinesis.protobuf.PutRecord.stream_name)
  return _internal_stream_name();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void PutRecord::set_stream_name(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.stream_name_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:aws.kinesis.protobuf.PutRecord.stream_name)
}
inline std::string* PutRecord::mutable_stream_name() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_stream_name();
  // @@protoc_insertion_point(field_mutable:aws.kinesis.protobuf.PutRecord.stream_name)
  return _s;
}
inline const std::string& PutRecord::_internal_stream_name() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.stream_name_.Get();
}
inline void PutRecord::_internal_set_stream_name(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.stream_name_.Set(value, GetArena());
}
inline std::string* PutRecord::_internal_mutable_stream_name() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.stream_name_.Mutable( GetArena());
}
inline std::string* PutRecord::release_stream_name() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:aws.kinesis.protobuf.PutRecord.stream_name)
  if ((_impl_._has_bits_[0] & 0x00000001u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* released = _impl_.stream_name_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.stream_name_.Set("", GetArena());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void PutRecord::set_allocated_stream_name(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.stream_name_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.stream_name_.IsDefault()) {
          _impl_.stream_name_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:aws.kinesis.protobuf.PutRecord.stream_name)
}

// required string partition_key = 2;
inline bool PutRecord::has_partition_key() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void PutRecord::clear_partition_key() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.partition_key_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const std::string& PutRecord::partition_key() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:aws.kinesis.protobuf.PutRecord.partition_key)
  return _internal_partition_key();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void PutRecord::set_partition_key(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.partition_key_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:aws.kinesis.protobuf.PutRecord.partition_key)
}
inline std::string* PutRecord::mutable_partition_key() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_partition_key();
  // @@protoc_insertion_point(field_mutable:aws.kinesis.protobuf.PutRecord.partition_key)
  return _s;
}
inline const std::string& PutRecord::_internal_partition_key() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.partition_key_.Get();
}
inline void PutRecord::_internal_set_partition_key(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.partition_key_.Set(value, GetArena());
}
inline std::string* PutRecord::_internal_mutable_partition_key() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000002u;
  return _impl_.partition_key_.Mutable( GetArena());
}
inline std::string* PutRecord::release_partition_key() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:aws.kinesis.protobuf.PutRecord.partition_key)
  if ((_impl_._has_bits_[0] & 0x00000002u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000002u;
  auto* released = _impl_.partition_key_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.partition_key_.Set("", GetArena());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void PutRecord::set_allocated_partition_key(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.partition_key_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.partition_key_.IsDefault()) {
          _impl_.partition_key_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:aws.kinesis.protobuf.PutRecord.partition_key)
}

// optional string explicit_hash_key = 3;
inline bool PutRecord::has_explicit_hash_key() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline void PutRecord::clear_explicit_hash_key() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.explicit_hash_key_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline const std::string& PutRecord::explicit_hash_key() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:aws.kinesis.protobuf.PutRecord.explicit_hash_key)
  return _internal_explicit_hash_key();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void PutRecord::set_explicit_hash_key(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.explicit_hash_key_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:aws.kinesis.protobuf.PutRecord.explicit_hash_key)
}
inline std::string* PutRecord::mutable_explicit_hash_key() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_explicit_hash_key();
  // @@protoc_insertion_point(field_mutable:aws.kinesis.protobuf.PutRecord.explicit_hash_key)
  return _s;
}
inline const std::string& PutRecord::_internal_explicit_hash_key() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.explicit_hash_key_.Get();
}
inline void PutRecord::_internal_set_explicit_hash_key(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.explicit_hash_key_.Set(value, GetArena());
}
inline std::string* PutRecord::_internal_mutable_explicit_hash_key() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000004u;
  return _impl_.explicit_hash_key_.Mutable( GetArena());
}
inline std::string* PutRecord::release_explicit_hash_key() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:aws.kinesis.protobuf.PutRecord.explicit_hash_key)
  if ((_impl_._has_bits_[0] & 0x00000004u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000004u;
  auto* released = _impl_.explicit_hash_key_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.explicit_hash_key_.Set("", GetArena());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void PutRecord::set_allocated_explicit_hash_key(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.explicit_hash_key_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.explicit_hash_key_.IsDefault()) {
          _impl_.explicit_hash_key_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:aws.kinesis.protobuf.PutRecord.explicit_hash_key)
}

// required bytes data = 4;
inline bool PutRecord::has_data() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline void PutRecord::clear_data() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.data_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline const std::string& PutRecord::data() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:aws.kinesis.protobuf.PutRecord.data)
  return _internal_data();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void PutRecord::set_data(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.data_.SetBytes(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:aws.kinesis.protobuf.PutRecord.data)
}
inline std::string* PutRecord::mutable_data() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_data();
  // @@protoc_insertion_point(field_mutable:aws.kinesis.protobuf.PutRecord.data)
  return _s;
}
inline const std::string& PutRecord::_internal_data() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.data_.Get();
}
inline void PutRecord::_internal_set_data(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.data_.Set(value, GetArena());
}
inline std::string* PutRecord::_internal_mutable_data() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000008u;
  return _impl_.data_.Mutable( GetArena());
}
inline std::string* PutRecord::release_data() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:aws.kinesis.protobuf.PutRecord.data)
  if ((_impl_._has_bits_[0] & 0x00000008u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000008u;
  auto* released = _impl_.data_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.data_.Set("", GetArena());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void PutRecord::set_allocated_data(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  _impl_.data_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.data_.IsDefault()) {
          _impl_.data_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:aws.kinesis.protobuf.PutRecord.data)
}

// optional string stream_arn = 5;
inline bool PutRecord::has_stream_arn() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline void PutRecord::clear_stream_arn() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.stream_arn_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline const std::string& PutRecord::stream_arn() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:aws.kinesis.protobuf.PutRecord.stream_arn)
  return _internal_stream_arn();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void PutRecord::set_stream_arn(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.stream_arn_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:aws.kinesis.protobuf.PutRecord.stream_arn)
}
inline std::string* PutRecord::mutable_stream_arn() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_stream_arn();
  // @@protoc_insertion_point(field_mutable:aws.kinesis.protobuf.PutRecord.stream_arn)
  return _s;
}
inline const std::string& PutRecord::_internal_stream_arn() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.stream_arn_.Get();
}
inline void PutRecord::_internal_set_stream_arn(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.stream_arn_.Set(value, GetArena());
}
inline std::string* PutRecord::_internal_mutable_stream_arn() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000010u;
  return _impl_.stream_arn_.Mutable( GetArena());
}
inline std::string* PutRecord::release_stream_arn() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:aws.kinesis.protobuf.PutRecord.stream_arn)
  if ((_impl_._has_bits_[0] & 0x00000010u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000010u;
  auto* released = _impl_.stream_arn_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.stream_arn_.Set("", GetArena());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void PutRecord::set_allocated_stream_arn(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000010u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000010u;
  }
  _impl_.stream_arn_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.stream_arn_.IsDefault()) {
          _impl_.stream_arn_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:aws.kinesis.protobuf.PutRecord.stream_arn)
}

// -------------------------------------------------------------------

// Flush

// optional string stream_name = 1;
inline bool Flush::has_stream_name() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void Flush::clear_stream_name() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.stream_name_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& Flush::stream_name() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:aws.kinesis.protobuf.Flush.stream_name)
  return _internal_stream_name();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Flush::set_stream_name(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.stream_name_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:aws.kinesis.protobuf.Flush.stream_name)
}
inline std::string* Flush::mutable_stream_name() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_stream_name();
  // @@protoc_insertion_point(field_mutable:aws.kinesis.protobuf.Flush.stream_name)
  return _s;
}
inline const std::string& Flush::_internal_stream_name() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.stream_name_.Get();
}
inline void Flush::_internal_set_stream_name(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.stream_name_.Set(value, GetArena());
}
inline std::string* Flush::_internal_mutable_stream_name() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.stream_name_.Mutable( GetArena());
}
inline std::string* Flush::release_stream_name() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:aws.kinesis.protobuf.Flush.stream_name)
  if ((_impl_._has_bits_[0] & 0x00000001u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* released = _impl_.stream_name_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.stream_name_.Set("", GetArena());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void Flush::set_allocated_stream_name(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.stream_name_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.stream_name_.IsDefault()) {
          _impl_.stream_name_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:aws.kinesis.protobuf.Flush.stream_name)
}

// -------------------------------------------------------------------

// Attempt

// required uint32 delay = 1;
inline bool Attempt::has_delay() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline void Attempt::clear_delay() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.delay_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline ::uint32_t Attempt::delay() const {
  // @@protoc_insertion_point(field_get:aws.kinesis.protobuf.Attempt.delay)
  return _internal_delay();
}
inline void Attempt::set_delay(::uint32_t value) {
  _internal_set_delay(value);
  // @@protoc_insertion_point(field_set:aws.kinesis.protobuf.Attempt.delay)
}
inline ::uint32_t Attempt::_internal_delay() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.delay_;
}
inline void Attempt::_internal_set_delay(::uint32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.delay_ = value;
}

// required uint32 duration = 2;
inline bool Attempt::has_duration() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline void Attempt::clear_duration() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.duration_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline ::uint32_t Attempt::duration() const {
  // @@protoc_insertion_point(field_get:aws.kinesis.protobuf.Attempt.duration)
  return _internal_duration();
}
inline void Attempt::set_duration(::uint32_t value) {
  _internal_set_duration(value);
  // @@protoc_insertion_point(field_set:aws.kinesis.protobuf.Attempt.duration)
}
inline ::uint32_t Attempt::_internal_duration() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.duration_;
}
inline void Attempt::_internal_set_duration(::uint32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.duration_ = value;
}

// required bool success = 3;
inline bool Attempt::has_success() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline void Attempt::clear_success() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.success_ = false;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline bool Attempt::success() const {
  // @@protoc_insertion_point(field_get:aws.kinesis.protobuf.Attempt.success)
  return _internal_success();
}
inline void Attempt::set_success(bool value) {
  _internal_set_success(value);
  // @@protoc_insertion_point(field_set:aws.kinesis.protobuf.Attempt.success)
}
inline bool Attempt::_internal_success() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.success_;
}
inline void Attempt::_internal_set_success(bool value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.success_ = value;
}

// optional string error_code = 4;
inline bool Attempt::has_error_code() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void Attempt::clear_error_code() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.error_code_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& Attempt::error_code() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:aws.kinesis.protobuf.Attempt.error_code)
  return _internal_error_code();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Attempt::set_error_code(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.error_code_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:aws.kinesis.protobuf.Attempt.error_code)
}
inline std::string* Attempt::mutable_error_code() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_error_code();
  // @@protoc_insertion_point(field_mutable:aws.kinesis.protobuf.Attempt.error_code)
  return _s;
}
inline const std::string& Attempt::_internal_error_code() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.error_code_.Get();
}
inline void Attempt::_internal_set_error_code(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.error_code_.Set(value, GetArena());
}
inline std::string* Attempt::_internal_mutable_error_code() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.error_code_.Mutable( GetArena());
}
inline std::string* Attempt::release_error_code() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:aws.kinesis.protobuf.Attempt.error_code)
  if ((_impl_._has_bits_[0] & 0x00000001u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* released = _impl_.error_code_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.error_code_.Set("", GetArena());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void Attempt::set_allocated_error_code(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.error_code_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.error_code_.IsDefault()) {
          _impl_.error_code_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:aws.kinesis.protobuf.Attempt.error_code)
}

// optional string error_message = 5;
inline bool Attempt::has_error_message() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void Attempt::clear_error_message() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.error_message_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const std::string& Attempt::error_message() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:aws.kinesis.protobuf.Attempt.error_message)
  return _internal_error_message();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Attempt::set_error_message(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.error_message_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:aws.kinesis.protobuf.Attempt.error_message)
}
inline std::string* Attempt::mutable_error_message() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_error_message();
  // @@protoc_insertion_point(field_mutable:aws.kinesis.protobuf.Attempt.error_message)
  return _s;
}
inline const std::string& Attempt::_internal_error_message() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.error_message_.Get();
}
inline void Attempt::_internal_set_error_message(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.error_message_.Set(value, GetArena());
}
inline std::string* Attempt::_internal_mutable_error_message() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000002u;
  return _impl_.error_message_.Mutable( GetArena());
}
inline std::string* Attempt::release_error_message() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:aws.kinesis.protobuf.Attempt.error_message)
  if ((_impl_._has_bits_[0] & 0x00000002u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000002u;
  auto* released = _impl_.error_message_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.error_message_.Set("", GetArena());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void Attempt::set_allocated_error_message(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.error_message_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.error_message_.IsDefault()) {
          _impl_.error_message_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:aws.kinesis.protobuf.Attempt.error_message)
}

// -------------------------------------------------------------------

// PutRecordResult

// repeated .aws.kinesis.protobuf.Attempt attempts = 1;
inline int PutRecordResult::_internal_attempts_size() const {
  return _internal_attempts().size();
}
inline int PutRecordResult::attempts_size() const {
  return _internal_attempts_size();
}
inline void PutRecordResult::clear_attempts() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.attempts_.Clear();
}
inline ::aws::kinesis::protobuf::Attempt* PutRecordResult::mutable_attempts(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:aws.kinesis.protobuf.PutRecordResult.attempts)
  return _internal_mutable_attempts()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::aws::kinesis::protobuf::Attempt>* PutRecordResult::mutable_attempts()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:aws.kinesis.protobuf.PutRecordResult.attempts)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_attempts();
}
inline const ::aws::kinesis::protobuf::Attempt& PutRecordResult::attempts(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:aws.kinesis.protobuf.PutRecordResult.attempts)
  return _internal_attempts().Get(index);
}
inline ::aws::kinesis::protobuf::Attempt* PutRecordResult::add_attempts() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::aws::kinesis::protobuf::Attempt* _add = _internal_mutable_attempts()->Add();
  // @@protoc_insertion_point(field_add:aws.kinesis.protobuf.PutRecordResult.attempts)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::aws::kinesis::protobuf::Attempt>& PutRecordResult::attempts() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:aws.kinesis.protobuf.PutRecordResult.attempts)
  return _internal_attempts();
}
inline const ::google::protobuf::RepeatedPtrField<::aws::kinesis::protobuf::Attempt>&
PutRecordResult::_internal_attempts() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.attempts_;
}
inline ::google::protobuf::RepeatedPtrField<::aws::kinesis::protobuf::Attempt>*
PutRecordResult::_internal_mutable_attempts() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.attempts_;
}

// required bool success = 2;
inline bool PutRecordResult::has_success() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline void PutRecordResult::clear_success() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.success_ = false;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline bool PutRecordResult::success() const {
  // @@protoc_insertion_point(field_get:aws.kinesis.protobuf.PutRecordResult.success)
  return _internal_success();
}
inline void PutRecordResult::set_success(bool value) {
  _internal_set_success(value);
  // @@protoc_insertion_point(field_set:aws.kinesis.protobuf.PutRecordResult.success)
}
inline bool PutRecordResult::_internal_success() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.success_;
}
inline void PutRecordResult::_internal_set_success(bool value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.success_ = value;
}

// optional string shard_id = 3;
inline bool PutRecordResult::has_shard_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void PutRecordResult::clear_shard_id() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.shard_id_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& PutRecordResult::shard_id() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:aws.kinesis.protobuf.PutRecordResult.shard_id)
  return _internal_shard_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void PutRecordResult::set_shard_id(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.shard_id_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:aws.kinesis.protobuf.PutRecordResult.shard_id)
}
inline std::string* PutRecordResult::mutable_shard_id() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_shard_id();
  // @@protoc_insertion_point(field_mutable:aws.kinesis.protobuf.PutRecordResult.shard_id)
  return _s;
}
inline const std::string& PutRecordResult::_internal_shard_id() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.shard_id_.Get();
}
inline void PutRecordResult::_internal_set_shard_id(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.shard_id_.Set(value, GetArena());
}
inline std::string* PutRecordResult::_internal_mutable_shard_id() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.shard_id_.Mutable( GetArena());
}
inline std::string* PutRecordResult::release_shard_id() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:aws.kinesis.protobuf.PutRecordResult.shard_id)
  if ((_impl_._has_bits_[0] & 0x00000001u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* released = _impl_.shard_id_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.shard_id_.Set("", GetArena());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void PutRecordResult::set_allocated_shard_id(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.shard_id_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.shard_id_.IsDefault()) {
          _impl_.shard_id_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:aws.kinesis.protobuf.PutRecordResult.shard_id)
}

// optional string sequence_number = 4;
inline bool PutRecordResult::has_sequence_number() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void PutRecordResult::clear_sequence_number() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.sequence_number_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const std::string& PutRecordResult::sequence_number() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:aws.kinesis.protobuf.PutRecordResult.sequence_number)
  return _internal_sequence_number();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void PutRecordResult::set_sequence_number(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.sequence_number_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:aws.kinesis.protobuf.PutRecordResult.sequence_number)
}
inline std::string* PutRecordResult::mutable_sequence_number() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_sequence_number();
  // @@protoc_insertion_point(field_mutable:aws.kinesis.protobuf.PutRecordResult.sequence_number)
  return _s;
}
inline const std::string& PutRecordResult::_internal_sequence_number() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.sequence_number_.Get();
}
inline void PutRecordResult::_internal_set_sequence_number(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.sequence_number_.Set(value, GetArena());
}
inline std::string* PutRecordResult::_internal_mutable_sequence_number() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000002u;
  return _impl_.sequence_number_.Mutable( GetArena());
}
inline std::string* PutRecordResult::release_sequence_number() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:aws.kinesis.protobuf.PutRecordResult.sequence_number)
  if ((_impl_._has_bits_[0] & 0x00000002u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000002u;
  auto* released = _impl_.sequence_number_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.sequence_number_.Set("", GetArena());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void PutRecordResult::set_allocated_sequence_number(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.sequence_number_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.sequence_number_.IsDefault()) {
          _impl_.sequence_number_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:aws.kinesis.protobuf.PutRecordResult.sequence_number)
}

// -------------------------------------------------------------------

// Credentials

// required string akid = 1;
inline bool Credentials::has_akid() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void Credentials::clear_akid() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.akid_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& Credentials::akid() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:aws.kinesis.protobuf.Credentials.akid)
  return _internal_akid();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Credentials::set_akid(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.akid_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:aws.kinesis.protobuf.Credentials.akid)
}
inline std::string* Credentials::mutable_akid() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_akid();
  // @@protoc_insertion_point(field_mutable:aws.kinesis.protobuf.Credentials.akid)
  return _s;
}
inline const std::string& Credentials::_internal_akid() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.akid_.Get();
}
inline void Credentials::_internal_set_akid(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.akid_.Set(value, GetArena());
}
inline std::string* Credentials::_internal_mutable_akid() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.akid_.Mutable( GetArena());
}
inline std::string* Credentials::release_akid() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:aws.kinesis.protobuf.Credentials.akid)
  if ((_impl_._has_bits_[0] & 0x00000001u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* released = _impl_.akid_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.akid_.Set("", GetArena());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void Credentials::set_allocated_akid(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.akid_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.akid_.IsDefault()) {
          _impl_.akid_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:aws.kinesis.protobuf.Credentials.akid)
}

// required string secret_key = 2;
inline bool Credentials::has_secret_key() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void Credentials::clear_secret_key() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.secret_key_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const std::string& Credentials::secret_key() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:aws.kinesis.protobuf.Credentials.secret_key)
  return _internal_secret_key();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Credentials::set_secret_key(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.secret_key_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:aws.kinesis.protobuf.Credentials.secret_key)
}
inline std::string* Credentials::mutable_secret_key() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_secret_key();
  // @@protoc_insertion_point(field_mutable:aws.kinesis.protobuf.Credentials.secret_key)
  return _s;
}
inline const std::string& Credentials::_internal_secret_key() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.secret_key_.Get();
}
inline void Credentials::_internal_set_secret_key(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.secret_key_.Set(value, GetArena());
}
inline std::string* Credentials::_internal_mutable_secret_key() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000002u;
  return _impl_.secret_key_.Mutable( GetArena());
}
inline std::string* Credentials::release_secret_key() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:aws.kinesis.protobuf.Credentials.secret_key)
  if ((_impl_._has_bits_[0] & 0x00000002u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000002u;
  auto* released = _impl_.secret_key_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.secret_key_.Set("", GetArena());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void Credentials::set_allocated_secret_key(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.secret_key_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.secret_key_.IsDefault()) {
          _impl_.secret_key_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:aws.kinesis.protobuf.Credentials.secret_key)
}

// optional string token = 3;
inline bool Credentials::has_token() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline void Credentials::clear_token() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.token_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline const std::string& Credentials::token() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:aws.kinesis.protobuf.Credentials.token)
  return _internal_token();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Credentials::set_token(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.token_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:aws.kinesis.protobuf.Credentials.token)
}
inline std::string* Credentials::mutable_token() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_token();
  // @@protoc_insertion_point(field_mutable:aws.kinesis.protobuf.Credentials.token)
  return _s;
}
inline const std::string& Credentials::_internal_token() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.token_.Get();
}
inline void Credentials::_internal_set_token(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.token_.Set(value, GetArena());
}
inline std::string* Credentials::_internal_mutable_token() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000004u;
  return _impl_.token_.Mutable( GetArena());
}
inline std::string* Credentials::release_token() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:aws.kinesis.protobuf.Credentials.token)
  if ((_impl_._has_bits_[0] & 0x00000004u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000004u;
  auto* released = _impl_.token_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.token_.Set("", GetArena());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void Credentials::set_allocated_token(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.token_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.token_.IsDefault()) {
          _impl_.token_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:aws.kinesis.protobuf.Credentials.token)
}

// -------------------------------------------------------------------

// SetCredentials

// optional bool for_metrics = 1;
inline bool SetCredentials::has_for_metrics() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void SetCredentials::clear_for_metrics() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.for_metrics_ = false;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline bool SetCredentials::for_metrics() const {
  // @@protoc_insertion_point(field_get:aws.kinesis.protobuf.SetCredentials.for_metrics)
  return _internal_for_metrics();
}
inline void SetCredentials::set_for_metrics(bool value) {
  _internal_set_for_metrics(value);
  // @@protoc_insertion_point(field_set:aws.kinesis.protobuf.SetCredentials.for_metrics)
}
inline bool SetCredentials::_internal_for_metrics() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.for_metrics_;
}
inline void SetCredentials::_internal_set_for_metrics(bool value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.for_metrics_ = value;
}

// required .aws.kinesis.protobuf.Credentials credentials = 2;
inline bool SetCredentials::has_credentials() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.credentials_ != nullptr);
  return value;
}
inline void SetCredentials::clear_credentials() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.credentials_ != nullptr) _impl_.credentials_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::aws::kinesis::protobuf::Credentials& SetCredentials::_internal_credentials() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::aws::kinesis::protobuf::Credentials* p = _impl_.credentials_;
  return p != nullptr ? *p : reinterpret_cast<const ::aws::kinesis::protobuf::Credentials&>(::aws::kinesis::protobuf::_Credentials_default_instance_);
}
inline const ::aws::kinesis::protobuf::Credentials& SetCredentials::credentials() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:aws.kinesis.protobuf.SetCredentials.credentials)
  return _internal_credentials();
}
inline void SetCredentials::unsafe_arena_set_allocated_credentials(::aws::kinesis::protobuf::Credentials* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.credentials_);
  }
  _impl_.credentials_ = reinterpret_cast<::aws::kinesis::protobuf::Credentials*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:aws.kinesis.protobuf.SetCredentials.credentials)
}
inline ::aws::kinesis::protobuf::Credentials* SetCredentials::release_credentials() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::aws::kinesis::protobuf::Credentials* released = _impl_.credentials_;
  _impl_.credentials_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::aws::kinesis::protobuf::Credentials* SetCredentials::unsafe_arena_release_credentials() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:aws.kinesis.protobuf.SetCredentials.credentials)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::aws::kinesis::protobuf::Credentials* temp = _impl_.credentials_;
  _impl_.credentials_ = nullptr;
  return temp;
}
inline ::aws::kinesis::protobuf::Credentials* SetCredentials::_internal_mutable_credentials() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.credentials_ == nullptr) {
    auto* p = CreateMaybeMessage<::aws::kinesis::protobuf::Credentials>(GetArena());
    _impl_.credentials_ = reinterpret_cast<::aws::kinesis::protobuf::Credentials*>(p);
  }
  return _impl_.credentials_;
}
inline ::aws::kinesis::protobuf::Credentials* SetCredentials::mutable_credentials() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::aws::kinesis::protobuf::Credentials* _msg = _internal_mutable_credentials();
  // @@protoc_insertion_point(field_mutable:aws.kinesis.protobuf.SetCredentials.credentials)
  return _msg;
}
inline void SetCredentials::set_allocated_credentials(::aws::kinesis::protobuf::Credentials* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::aws::kinesis::protobuf::Credentials*>(_impl_.credentials_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::aws::kinesis::protobuf::Credentials*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.credentials_ = reinterpret_cast<::aws::kinesis::protobuf::Credentials*>(value);
  // @@protoc_insertion_point(field_set_allocated:aws.kinesis.protobuf.SetCredentials.credentials)
}

// -------------------------------------------------------------------

// Dimension

// required string key = 1;
inline bool Dimension::has_key() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void Dimension::clear_key() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.key_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& Dimension::key() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:aws.kinesis.protobuf.Dimension.key)
  return _internal_key();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Dimension::set_key(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.key_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:aws.kinesis.protobuf.Dimension.key)
}
inline std::string* Dimension::mutable_key() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_key();
  // @@protoc_insertion_point(field_mutable:aws.kinesis.protobuf.Dimension.key)
  return _s;
}
inline const std::string& Dimension::_internal_key() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.key_.Get();
}
inline void Dimension::_internal_set_key(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.key_.Set(value, GetArena());
}
inline std::string* Dimension::_internal_mutable_key() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.key_.Mutable( GetArena());
}
inline std::string* Dimension::release_key() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:aws.kinesis.protobuf.Dimension.key)
  if ((_impl_._has_bits_[0] & 0x00000001u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* released = _impl_.key_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.key_.Set("", GetArena());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void Dimension::set_allocated_key(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.key_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.key_.IsDefault()) {
          _impl_.key_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:aws.kinesis.protobuf.Dimension.key)
}

// required string value = 2;
inline bool Dimension::has_value() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void Dimension::clear_value() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.value_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const std::string& Dimension::value() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:aws.kinesis.protobuf.Dimension.value)
  return _internal_value();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Dimension::set_value(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.value_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:aws.kinesis.protobuf.Dimension.value)
}
inline std::string* Dimension::mutable_value() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_value();
  // @@protoc_insertion_point(field_mutable:aws.kinesis.protobuf.Dimension.value)
  return _s;
}
inline const std::string& Dimension::_internal_value() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.value_.Get();
}
inline void Dimension::_internal_set_value(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.value_.Set(value, GetArena());
}
inline std::string* Dimension::_internal_mutable_value() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000002u;
  return _impl_.value_.Mutable( GetArena());
}
inline std::string* Dimension::release_value() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:aws.kinesis.protobuf.Dimension.value)
  if ((_impl_._has_bits_[0] & 0x00000002u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000002u;
  auto* released = _impl_.value_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.value_.Set("", GetArena());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void Dimension::set_allocated_value(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.value_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.value_.IsDefault()) {
          _impl_.value_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:aws.kinesis.protobuf.Dimension.value)
}

// -------------------------------------------------------------------

// Stats

// required double count = 1;
inline bool Stats::has_count() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void Stats::clear_count() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.count_ = 0;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline double Stats::count() const {
  // @@protoc_insertion_point(field_get:aws.kinesis.protobuf.Stats.count)
  return _internal_count();
}
inline void Stats::set_count(double value) {
  _internal_set_count(value);
  // @@protoc_insertion_point(field_set:aws.kinesis.protobuf.Stats.count)
}
inline double Stats::_internal_count() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.count_;
}
inline void Stats::_internal_set_count(double value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.count_ = value;
}

// required double sum = 2;
inline bool Stats::has_sum() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void Stats::clear_sum() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.sum_ = 0;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline double Stats::sum() const {
  // @@protoc_insertion_point(field_get:aws.kinesis.protobuf.Stats.sum)
  return _internal_sum();
}
inline void Stats::set_sum(double value) {
  _internal_set_sum(value);
  // @@protoc_insertion_point(field_set:aws.kinesis.protobuf.Stats.sum)
}
inline double Stats::_internal_sum() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.sum_;
}
inline void Stats::_internal_set_sum(double value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.sum_ = value;
}

// required double mean = 3;
inline bool Stats::has_mean() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline void Stats::clear_mean() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.mean_ = 0;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline double Stats::mean() const {
  // @@protoc_insertion_point(field_get:aws.kinesis.protobuf.Stats.mean)
  return _internal_mean();
}
inline void Stats::set_mean(double value) {
  _internal_set_mean(value);
  // @@protoc_insertion_point(field_set:aws.kinesis.protobuf.Stats.mean)
}
inline double Stats::_internal_mean() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.mean_;
}
inline void Stats::_internal_set_mean(double value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.mean_ = value;
}

// required double min = 4;
inline bool Stats::has_min() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline void Stats::clear_min() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.min_ = 0;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline double Stats::min() const {
  // @@protoc_insertion_point(field_get:aws.kinesis.protobuf.Stats.min)
  return _internal_min();
}
inline void Stats::set_min(double value) {
  _internal_set_min(value);
  // @@protoc_insertion_point(field_set:aws.kinesis.protobuf.Stats.min)
}
inline double Stats::_internal_min() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.min_;
}
inline void Stats::_internal_set_min(double value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.min_ = value;
}

// required double max = 5;
inline bool Stats::has_max() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline void Stats::clear_max() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.max_ = 0;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline double Stats::max() const {
  // @@protoc_insertion_point(field_get:aws.kinesis.protobuf.Stats.max)
  return _internal_max();
}
inline void Stats::set_max(double value) {
  _internal_set_max(value);
  // @@protoc_insertion_point(field_set:aws.kinesis.protobuf.Stats.max)
}
inline double Stats::_internal_max() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.max_;
}
inline void Stats::_internal_set_max(double value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.max_ = value;
}

// -------------------------------------------------------------------

// Metric

// required string name = 1;
inline bool Metric::has_name() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void Metric::clear_name() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.name_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& Metric::name() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:aws.kinesis.protobuf.Metric.name)
  return _internal_name();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Metric::set_name(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.name_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:aws.kinesis.protobuf.Metric.name)
}
inline std::string* Metric::mutable_name() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:aws.kinesis.protobuf.Metric.name)
  return _s;
}
inline const std::string& Metric::_internal_name() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.name_.Get();
}
inline void Metric::_internal_set_name(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.name_.Set(value, GetArena());
}
inline std::string* Metric::_internal_mutable_name() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.name_.Mutable( GetArena());
}
inline std::string* Metric::release_name() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:aws.kinesis.protobuf.Metric.name)
  if ((_impl_._has_bits_[0] & 0x00000001u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* released = _impl_.name_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.name_.Set("", GetArena());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void Metric::set_allocated_name(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.name_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.name_.IsDefault()) {
          _impl_.name_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:aws.kinesis.protobuf.Metric.name)
}

// repeated .aws.kinesis.protobuf.Dimension dimensions = 2;
inline int Metric::_internal_dimensions_size() const {
  return _internal_dimensions().size();
}
inline int Metric::dimensions_size() const {
  return _internal_dimensions_size();
}
inline void Metric::clear_dimensions() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.dimensions_.Clear();
}
inline ::aws::kinesis::protobuf::Dimension* Metric::mutable_dimensions(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:aws.kinesis.protobuf.Metric.dimensions)
  return _internal_mutable_dimensions()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::aws::kinesis::protobuf::Dimension>* Metric::mutable_dimensions()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:aws.kinesis.protobuf.Metric.dimensions)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_dimensions();
}
inline const ::aws::kinesis::protobuf::Dimension& Metric::dimensions(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:aws.kinesis.protobuf.Metric.dimensions)
  return _internal_dimensions().Get(index);
}
inline ::aws::kinesis::protobuf::Dimension* Metric::add_dimensions() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::aws::kinesis::protobuf::Dimension* _add = _internal_mutable_dimensions()->Add();
  // @@protoc_insertion_point(field_add:aws.kinesis.protobuf.Metric.dimensions)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::aws::kinesis::protobuf::Dimension>& Metric::dimensions() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:aws.kinesis.protobuf.Metric.dimensions)
  return _internal_dimensions();
}
inline const ::google::protobuf::RepeatedPtrField<::aws::kinesis::protobuf::Dimension>&
Metric::_internal_dimensions() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.dimensions_;
}
inline ::google::protobuf::RepeatedPtrField<::aws::kinesis::protobuf::Dimension>*
Metric::_internal_mutable_dimensions() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.dimensions_;
}

// required .aws.kinesis.protobuf.Stats stats = 3;
inline bool Metric::has_stats() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.stats_ != nullptr);
  return value;
}
inline void Metric::clear_stats() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.stats_ != nullptr) _impl_.stats_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const ::aws::kinesis::protobuf::Stats& Metric::_internal_stats() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::aws::kinesis::protobuf::Stats* p = _impl_.stats_;
  return p != nullptr ? *p : reinterpret_cast<const ::aws::kinesis::protobuf::Stats&>(::aws::kinesis::protobuf::_Stats_default_instance_);
}
inline const ::aws::kinesis::protobuf::Stats& Metric::stats() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:aws.kinesis.protobuf.Metric.stats)
  return _internal_stats();
}
inline void Metric::unsafe_arena_set_allocated_stats(::aws::kinesis::protobuf::Stats* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.stats_);
  }
  _impl_.stats_ = reinterpret_cast<::aws::kinesis::protobuf::Stats*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:aws.kinesis.protobuf.Metric.stats)
}
inline ::aws::kinesis::protobuf::Stats* Metric::release_stats() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::aws::kinesis::protobuf::Stats* released = _impl_.stats_;
  _impl_.stats_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::aws::kinesis::protobuf::Stats* Metric::unsafe_arena_release_stats() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:aws.kinesis.protobuf.Metric.stats)

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::aws::kinesis::protobuf::Stats* temp = _impl_.stats_;
  _impl_.stats_ = nullptr;
  return temp;
}
inline ::aws::kinesis::protobuf::Stats* Metric::_internal_mutable_stats() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.stats_ == nullptr) {
    auto* p = CreateMaybeMessage<::aws::kinesis::protobuf::Stats>(GetArena());
    _impl_.stats_ = reinterpret_cast<::aws::kinesis::protobuf::Stats*>(p);
  }
  return _impl_.stats_;
}
inline ::aws::kinesis::protobuf::Stats* Metric::mutable_stats() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::aws::kinesis::protobuf::Stats* _msg = _internal_mutable_stats();
  // @@protoc_insertion_point(field_mutable:aws.kinesis.protobuf.Metric.stats)
  return _msg;
}
inline void Metric::set_allocated_stats(::aws::kinesis::protobuf::Stats* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::aws::kinesis::protobuf::Stats*>(_impl_.stats_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::aws::kinesis::protobuf::Stats*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }

  _impl_.stats_ = reinterpret_cast<::aws::kinesis::protobuf::Stats*>(value);
  // @@protoc_insertion_point(field_set_allocated:aws.kinesis.protobuf.Metric.stats)
}

// required uint64 seconds = 4;
inline bool Metric::has_seconds() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline void Metric::clear_seconds() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.seconds_ = ::uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline ::uint64_t Metric::seconds() const {
  // @@protoc_insertion_point(field_get:aws.kinesis.protobuf.Metric.seconds)
  return _internal_seconds();
}
inline void Metric::set_seconds(::uint64_t value) {
  _internal_set_seconds(value);
  // @@protoc_insertion_point(field_set:aws.kinesis.protobuf.Metric.seconds)
}
inline ::uint64_t Metric::_internal_seconds() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.seconds_;
}
inline void Metric::_internal_set_seconds(::uint64_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.seconds_ = value;
}

// -------------------------------------------------------------------

// MetricsRequest

// optional string name = 1;
inline bool MetricsRequest::has_name() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void MetricsRequest::clear_name() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.name_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& MetricsRequest::name() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:aws.kinesis.protobuf.MetricsRequest.name)
  return _internal_name();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void MetricsRequest::set_name(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.name_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:aws.kinesis.protobuf.MetricsRequest.name)
}
inline std::string* MetricsRequest::mutable_name() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:aws.kinesis.protobuf.MetricsRequest.name)
  return _s;
}
inline const std::string& MetricsRequest::_internal_name() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.name_.Get();
}
inline void MetricsRequest::_internal_set_name(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.name_.Set(value, GetArena());
}
inline std::string* MetricsRequest::_internal_mutable_name() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.name_.Mutable( GetArena());
}
inline std::string* MetricsRequest::release_name() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:aws.kinesis.protobuf.MetricsRequest.name)
  if ((_impl_._has_bits_[0] & 0x00000001u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* released = _impl_.name_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.name_.Set("", GetArena());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void MetricsRequest::set_allocated_name(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.name_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.name_.IsDefault()) {
          _impl_.name_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:aws.kinesis.protobuf.MetricsRequest.name)
}

// optional uint64 seconds = 2;
inline bool MetricsRequest::has_seconds() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void MetricsRequest::clear_seconds() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.seconds_ = ::uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline ::uint64_t MetricsRequest::seconds() const {
  // @@protoc_insertion_point(field_get:aws.kinesis.protobuf.MetricsRequest.seconds)
  return _internal_seconds();
}
inline void MetricsRequest::set_seconds(::uint64_t value) {
  _internal_set_seconds(value);
  // @@protoc_insertion_point(field_set:aws.kinesis.protobuf.MetricsRequest.seconds)
}
inline ::uint64_t MetricsRequest::_internal_seconds() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.seconds_;
}
inline void MetricsRequest::_internal_set_seconds(::uint64_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.seconds_ = value;
}

// -------------------------------------------------------------------

// MetricsResponse

// repeated .aws.kinesis.protobuf.Metric metrics = 1;
inline int MetricsResponse::_internal_metrics_size() const {
  return _internal_metrics().size();
}
inline int MetricsResponse::metrics_size() const {
  return _internal_metrics_size();
}
inline void MetricsResponse::clear_metrics() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.metrics_.Clear();
}
inline ::aws::kinesis::protobuf::Metric* MetricsResponse::mutable_metrics(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:aws.kinesis.protobuf.MetricsResponse.metrics)
  return _internal_mutable_metrics()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::aws::kinesis::protobuf::Metric>* MetricsResponse::mutable_metrics()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:aws.kinesis.protobuf.MetricsResponse.metrics)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_metrics();
}
inline const ::aws::kinesis::protobuf::Metric& MetricsResponse::metrics(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:aws.kinesis.protobuf.MetricsResponse.metrics)
  return _internal_metrics().Get(index);
}
inline ::aws::kinesis::protobuf::Metric* MetricsResponse::add_metrics() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::aws::kinesis::protobuf::Metric* _add = _internal_mutable_metrics()->Add();
  // @@protoc_insertion_point(field_add:aws.kinesis.protobuf.MetricsResponse.metrics)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::aws::kinesis::protobuf::Metric>& MetricsResponse::metrics() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:aws.kinesis.protobuf.MetricsResponse.metrics)
  return _internal_metrics();
}
inline const ::google::protobuf::RepeatedPtrField<::aws::kinesis::protobuf::Metric>&
MetricsResponse::_internal_metrics() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.metrics_;
}
inline ::google::protobuf::RepeatedPtrField<::aws::kinesis::protobuf::Metric>*
MetricsResponse::_internal_mutable_metrics() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.metrics_;
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace protobuf
}  // namespace kinesis
}  // namespace aws


// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // GOOGLE_PROTOBUF_INCLUDED_messages_2eproto_2epb_2eh
